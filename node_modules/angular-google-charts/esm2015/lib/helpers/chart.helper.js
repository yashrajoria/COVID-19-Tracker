import { ChartType } from '../models/chart-type.model';
const ChartTypesToPackages = {
    [ChartType.AnnotationChart]: 'annotationchart',
    [ChartType.AreaChart]: 'corechart',
    [ChartType.Bar]: 'bar',
    [ChartType.BarChart]: 'corechart',
    [ChartType.BubbleChart]: 'corechart',
    [ChartType.Calendar]: 'calendar',
    [ChartType.CandlestickChart]: 'corechart',
    [ChartType.ColumnChart]: 'corechart',
    [ChartType.ComboChart]: 'corechart',
    [ChartType.PieChart]: 'corechart',
    [ChartType.Gantt]: 'gantt',
    [ChartType.Gauge]: 'gauge',
    [ChartType.GeoChart]: 'geochart',
    [ChartType.Histogram]: 'corechart',
    [ChartType.Line]: 'line',
    [ChartType.LineChart]: 'corechart',
    [ChartType.Map]: 'map',
    [ChartType.OrgChart]: 'orgchart',
    [ChartType.Sankey]: 'sankey',
    [ChartType.Scatter]: 'scatter',
    [ChartType.ScatterChart]: 'corechart',
    [ChartType.SteppedAreaChart]: 'corechart',
    [ChartType.Table]: 'table',
    [ChartType.Timeline]: 'timeline',
    [ChartType.TreeMap]: 'treemap',
    [ChartType.WordTree]: 'wordtree'
};
export function getPackageForChart(type) {
    return ChartTypesToPackages[type];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1nb29nbGUtY2hhcnRzLyIsInNvdXJjZXMiOlsibGliL2hlbHBlcnMvY2hhcnQuaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUV2RCxNQUFNLG9CQUFvQixHQUFHO0lBQzNCLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxFQUFFLGlCQUFpQjtJQUM5QyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxXQUFXO0lBQ2xDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUs7SUFDdEIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsV0FBVztJQUNqQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxXQUFXO0lBQ3BDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFVBQVU7SUFDaEMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxXQUFXO0lBQ3pDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLFdBQVc7SUFDcEMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsV0FBVztJQUNuQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxXQUFXO0lBQ2pDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU87SUFDMUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTztJQUMxQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVO0lBQ2hDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFdBQVc7SUFDbEMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTTtJQUN4QixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxXQUFXO0lBQ2xDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUs7SUFDdEIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVTtJQUNoQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRO0lBQzVCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVM7SUFDOUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsV0FBVztJQUNyQyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLFdBQVc7SUFDekMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTztJQUMxQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVO0lBQ2hDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVM7SUFDOUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVTtDQUNqQyxDQUFDO0FBRUYsTUFBTSxVQUFVLGtCQUFrQixDQUFDLElBQWU7SUFDaEQsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhcnRUeXBlIH0gZnJvbSAnLi4vbW9kZWxzL2NoYXJ0LXR5cGUubW9kZWwnO1xuXG5jb25zdCBDaGFydFR5cGVzVG9QYWNrYWdlcyA9IHtcbiAgW0NoYXJ0VHlwZS5Bbm5vdGF0aW9uQ2hhcnRdOiAnYW5ub3RhdGlvbmNoYXJ0JyxcbiAgW0NoYXJ0VHlwZS5BcmVhQ2hhcnRdOiAnY29yZWNoYXJ0JyxcbiAgW0NoYXJ0VHlwZS5CYXJdOiAnYmFyJyxcbiAgW0NoYXJ0VHlwZS5CYXJDaGFydF06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkJ1YmJsZUNoYXJ0XTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuQ2FsZW5kYXJdOiAnY2FsZW5kYXInLFxuICBbQ2hhcnRUeXBlLkNhbmRsZXN0aWNrQ2hhcnRdOiAnY29yZWNoYXJ0JyxcbiAgW0NoYXJ0VHlwZS5Db2x1bW5DaGFydF06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkNvbWJvQ2hhcnRdOiAnY29yZWNoYXJ0JyxcbiAgW0NoYXJ0VHlwZS5QaWVDaGFydF06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkdhbnR0XTogJ2dhbnR0JyxcbiAgW0NoYXJ0VHlwZS5HYXVnZV06ICdnYXVnZScsXG4gIFtDaGFydFR5cGUuR2VvQ2hhcnRdOiAnZ2VvY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkhpc3RvZ3JhbV06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLkxpbmVdOiAnbGluZScsXG4gIFtDaGFydFR5cGUuTGluZUNoYXJ0XTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuTWFwXTogJ21hcCcsXG4gIFtDaGFydFR5cGUuT3JnQ2hhcnRdOiAnb3JnY2hhcnQnLFxuICBbQ2hhcnRUeXBlLlNhbmtleV06ICdzYW5rZXknLFxuICBbQ2hhcnRUeXBlLlNjYXR0ZXJdOiAnc2NhdHRlcicsXG4gIFtDaGFydFR5cGUuU2NhdHRlckNoYXJ0XTogJ2NvcmVjaGFydCcsXG4gIFtDaGFydFR5cGUuU3RlcHBlZEFyZWFDaGFydF06ICdjb3JlY2hhcnQnLFxuICBbQ2hhcnRUeXBlLlRhYmxlXTogJ3RhYmxlJyxcbiAgW0NoYXJ0VHlwZS5UaW1lbGluZV06ICd0aW1lbGluZScsXG4gIFtDaGFydFR5cGUuVHJlZU1hcF06ICd0cmVlbWFwJyxcbiAgW0NoYXJ0VHlwZS5Xb3JkVHJlZV06ICd3b3JkdHJlZSdcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWNrYWdlRm9yQ2hhcnQodHlwZTogQ2hhcnRUeXBlKTogc3RyaW5nIHtcbiAgcmV0dXJuIENoYXJ0VHlwZXNUb1BhY2thZ2VzW3R5cGVdO1xufVxuIl19