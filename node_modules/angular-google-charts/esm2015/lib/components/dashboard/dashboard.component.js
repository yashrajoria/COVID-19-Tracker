import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';
import { combineLatest } from 'rxjs';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ControlWrapperComponent } from '../control-wrapper/control-wrapper.component';
let DashboardComponent = class DashboardComponent {
    constructor(element, loaderService) {
        this.element = element;
        this.loaderService = loaderService;
        /**
         * The dashboard has completed drawing and is ready to accept changes.
         *
         * The ready event will also fire:
         * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,
         * - after redrawing any chart on the dashboard.
         */
        this.ready = new EventEmitter();
        /**
         * Emits when an error occurs when attempting to render the dashboard.
         * One or more of the controls and charts that are part of the dashboard may have failed rendering.
         */
        this.error = new EventEmitter();
        this.initialized = false;
    }
    ngOnInit() {
        this.loaderService.loadChartPackages('controls').subscribe(() => {
            this.createDataTable();
            this.createDashboard();
            this.initialized = true;
        });
    }
    ngOnChanges(changes) {
        if (!this.initialized) {
            return;
        }
        if (changes.data || changes.columns) {
            this.createDataTable();
            this.dashboard.draw(this.dataTable);
        }
    }
    createDashboard() {
        // TODO: This should happen in the control wrapper
        // However, I don't yet know how to do this because then `bind()` would get called multiple times
        // for the same control if something changes. This is not supported by google charts as far as I can tell
        // from their source code.
        const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);
        const chartsReady$ = this.controlWrappers
            .map(control => control.for)
            .map(charts => {
            if (Array.isArray(charts)) {
                // CombineLatest waits for all observables
                return combineLatest(charts.map(chart => chart.wrapperReady$));
            }
            else {
                return charts.wrapperReady$;
            }
        });
        // We have to wait for all chart wrappers and control wrappers to be initialized
        // before we can compose them together to create the dashboard
        combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {
            this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);
            this.initializeBindings();
            this.dashboard.draw(this.dataTable);
        });
    }
    initializeBindings() {
        this.controlWrappers.forEach(control => {
            if (Array.isArray(control.for)) {
                const chartWrappers = control.for.map(chart => chart.chartWrapper);
                this.dashboard.bind(control.controlWrapper, chartWrappers);
            }
            else {
                this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);
            }
        });
    }
    createDataTable() {
        if (this.data == null) {
            return;
        }
        let firstRowIsData = true;
        if (this.columns != null) {
            firstRowIsData = false;
        }
        this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);
    }
    getDataAsTable() {
        if (this.columns) {
            return [this.columns, ...this.data];
        }
        else {
            return this.data;
        }
    }
};
DashboardComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ScriptLoaderService }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], DashboardComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], DashboardComponent.prototype, "columns", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DashboardComponent.prototype, "ready", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DashboardComponent.prototype, "error", void 0);
__decorate([
    ContentChildren(ControlWrapperComponent),
    __metadata("design:type", QueryList)
], DashboardComponent.prototype, "controlWrappers", void 0);
DashboardComponent = __decorate([
    Component({
        selector: 'dashboard',
        template: '<ng-content></ng-content>',
        changeDetection: ChangeDetectionStrategy.OnPush,
        exportAs: 'dashboard',
        host: { class: 'dashboard' }
    }),
    __metadata("design:paramtypes", [ElementRef, ScriptLoaderService])
], DashboardComponent);
export { DashboardComponent };
//# sourceMappingURL=data:application/json;base64,