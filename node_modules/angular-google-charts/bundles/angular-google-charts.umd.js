(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('angular-google-charts', ['exports', 'rxjs', '@angular/core', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['angular-google-charts'] = {}, global.rxjs, global.ng.core, global.rxjs.operators));
}(this, (function (exports, rxjs, core, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ChartEditorRef = /** @class */ (function () {
        function ChartEditorRef(editor) {
            this.editor = editor;
            this.doneSubject = new rxjs.Subject();
            this.addEventListeners();
        }
        /**
         * Gets an observable that is notified when the dialog is saved.
         * Emits either the result if the dialog was saved or `null` if editing was cancelled.
         */
        ChartEditorRef.prototype.afterClosed = function () {
            return this.doneSubject.asObservable();
        };
        /**
         * Stops editing the chart and closes the dialog.
         */
        ChartEditorRef.prototype.cancel = function () {
            this.editor.closeDialog();
        };
        ChartEditorRef.prototype.addEventListeners = function () {
            var _this = this;
            google.visualization.events.addOneTimeListener(this.editor, 'ok', function () {
                google.visualization.events.removeAllListeners(_this.editor);
                var updatedChartWrapper = _this.editor.getChartWrapper();
                _this.doneSubject.next(updatedChartWrapper);
                _this.doneSubject.complete();
            });
            google.visualization.events.addOneTimeListener(this.editor, 'cancel', function () {
                google.visualization.events.removeAllListeners(_this.editor);
                _this.doneSubject.next(null);
                _this.doneSubject.complete();
            });
        };
        return ChartEditorRef;
    }());

    var GOOGLE_CHARTS_CONFIG = new core.InjectionToken('GOOGLE_CHARTS_CONFIG');

    var DEFAULT_CONFIG = {
        mapsApiKey: '',
        version: 'current',
        safeMode: false
    };
    var ScriptLoaderService = /** @class */ (function () {
        function ScriptLoaderService(zone, localeId, config) {
            this.zone = zone;
            this.localeId = localeId;
            this.config = config;
            this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
            this.scriptLoadSubject = new rxjs.Subject();
            this.config = __assign(__assign({}, DEFAULT_CONFIG), (config || {}));
        }
        /**
         * Checks whether `google.charts` is available.
         *
         * If not, it can be loaded by calling `loadChartPackages`.
         *
         * @returns `true` if `google.charts` is available, `false` otherwise.
         */
        ScriptLoaderService.prototype.isGoogleChartsAvailable = function () {
            if (typeof google === 'undefined' || typeof google.charts === 'undefined') {
                return false;
            }
            return true;
        };
        /**
         * Loads the Google Chart script and the provided chart packages.
         * Can be called multiple times to load more packages.
         *
         * When called without any arguments, this will just load the default package
         * containing the namespaces `google.charts` and `google.visualization` without any charts.
         *
         * @param packages The packages to load.
         * @returns A stream emitting as soon as the chart packages are loaded.
         */
        ScriptLoaderService.prototype.loadChartPackages = function () {
            var _this = this;
            var packages = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                packages[_i] = arguments[_i];
            }
            return this.loadGoogleCharts().pipe(operators.switchMap(function () {
                return new rxjs.Observable(function (observer) {
                    var config = {
                        packages: packages,
                        language: _this.localeId,
                        mapsApiKey: _this.config.mapsApiKey,
                        safeMode: _this.config.safeMode
                    };
                    google.charts.load(_this.config.version, config);
                    google.charts.setOnLoadCallback(function () {
                        _this.zone.run(function () {
                            observer.next();
                            observer.complete();
                        });
                    });
                });
            }));
        };
        /**
         * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.
         *
         * @returns A stream emitting as soon as loading has completed.
         * If the google charts script is already loaded, the stream emits immediately.
         */
        ScriptLoaderService.prototype.loadGoogleCharts = function () {
            var _this = this;
            if (this.isGoogleChartsAvailable()) {
                return rxjs.of(null);
            }
            else if (!this.isLoadingGoogleCharts()) {
                var script = this.createGoogleChartsScript();
                script.onload = function () {
                    _this.zone.run(function () {
                        _this.scriptLoadSubject.next();
                        _this.scriptLoadSubject.complete();
                    });
                };
                script.onerror = function () {
                    _this.zone.run(function () {
                        console.error('Failed to load the google charts script!');
                        _this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));
                    });
                };
            }
            return this.scriptLoadSubject.asObservable();
        };
        ScriptLoaderService.prototype.isLoadingGoogleCharts = function () {
            return this.getGoogleChartsScript() != null;
        };
        ScriptLoaderService.prototype.getGoogleChartsScript = function () {
            var _this = this;
            var pageScripts = Array.from(document.getElementsByTagName('script'));
            return pageScripts.find(function (script) { return script.src === _this.scriptSource; });
        };
        ScriptLoaderService.prototype.createGoogleChartsScript = function () {
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = this.scriptSource;
            script.async = true;
            document.getElementsByTagName('head')[0].appendChild(script);
            return script;
        };
        ScriptLoaderService.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [GOOGLE_CHARTS_CONFIG,] }, { type: core.Optional }] }
        ]; };
        ScriptLoaderService.ɵprov = core["ɵɵdefineInjectable"]({ factory: function ScriptLoaderService_Factory() { return new ScriptLoaderService(core["ɵɵinject"](core.NgZone), core["ɵɵinject"](core.LOCALE_ID), core["ɵɵinject"](GOOGLE_CHARTS_CONFIG, 8)); }, token: ScriptLoaderService, providedIn: "root" });
        ScriptLoaderService = __decorate([
            core.Injectable({ providedIn: 'root' }),
            __param(1, core.Inject(core.LOCALE_ID)),
            __param(2, core.Inject(GOOGLE_CHARTS_CONFIG)), __param(2, core.Optional()),
            __metadata("design:paramtypes", [core.NgZone, String, Object])
        ], ScriptLoaderService);
        return ScriptLoaderService;
    }());

    var ChartEditorComponent = /** @class */ (function () {
        function ChartEditorComponent(scriptLoaderService) {
            this.scriptLoaderService = scriptLoaderService;
            this.initializedSubject = new rxjs.Subject();
        }
        Object.defineProperty(ChartEditorComponent.prototype, "initialized$", {
            /**
             * Emits as soon as the chart editor is fully initialized.
             */
            get: function () {
                return this.initializedSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        ChartEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.scriptLoaderService.loadChartPackages('charteditor').subscribe(function () {
                _this.editor = new google.visualization.ChartEditor();
                _this.initializedSubject.next(_this.editor);
                _this.initializedSubject.complete();
            });
        };
        ChartEditorComponent.prototype.editChart = function (component, options) {
            var handle = new ChartEditorRef(this.editor);
            this.editor.openDialog(component.chartWrapper, options || {});
            handle.afterClosed().subscribe(function (result) {
                if (result) {
                    component.chartWrapper = result;
                }
            });
            return handle;
        };
        ChartEditorComponent.ctorParameters = function () { return [
            { type: ScriptLoaderService }
        ]; };
        ChartEditorComponent = __decorate([
            core.Component({
                selector: 'chart-editor',
                template: "<ng-content></ng-content>",
                host: { class: 'chart-editor' },
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [ScriptLoaderService])
        ], ChartEditorComponent);
        return ChartEditorComponent;
    }());


    (function (ChartType) {
        ChartType["AnnotationChart"] = "AnnotationChart";
        ChartType["AreaChart"] = "AreaChart";
        ChartType["Bar"] = "Bar";
        ChartType["BarChart"] = "BarChart";
        ChartType["BubbleChart"] = "BubbleChart";
        ChartType["Calendar"] = "Calendar";
        ChartType["CandlestickChart"] = "CandlestickChart";
        ChartType["ColumnChart"] = "ColumnChart";
        ChartType["ComboChart"] = "ComboChart";
        ChartType["PieChart"] = "PieChart";
        ChartType["Gantt"] = "Gantt";
        ChartType["Gauge"] = "Gauge";
        ChartType["GeoChart"] = "GeoChart";
        ChartType["Histogram"] = "Histogram";
        ChartType["Line"] = "Line";
        ChartType["LineChart"] = "LineChart";
        ChartType["Map"] = "Map";
        ChartType["OrgChart"] = "OrgChart";
        ChartType["Sankey"] = "Sankey";
        ChartType["Scatter"] = "Scatter";
        ChartType["ScatterChart"] = "ScatterChart";
        ChartType["SteppedAreaChart"] = "SteppedAreaChart";
        ChartType["Table"] = "Table";
        ChartType["Timeline"] = "Timeline";
        ChartType["TreeMap"] = "TreeMap";
        ChartType["WordTree"] = "wordtree";
    })(exports.ChartType || (exports.ChartType = {}));

    /**
     * Generates a random ID which can be used to uniquely identify an element.
     */
    function generateRandomId() {
        // Math.random should be unique because of its seeding algorithm.
        // Convert it to base 36 (numbers + letters), and grab the first 9 characters
        // after the decimal.
        return '_' + Math.random().toString(36).substr(2, 9);
    }


    (function (FilterType) {
        FilterType["Category"] = "CategoryFilter";
        FilterType["ChartRange"] = "ChartRangeFilter";
        FilterType["DateRange"] = "DateRangeFilter";
        FilterType["NumberRange"] = "NumberRangeFilter";
        FilterType["String"] = "StringFilter";
    })(exports.FilterType || (exports.FilterType = {}));

    var ControlWrapperComponent = /** @class */ (function () {
        function ControlWrapperComponent(loaderService) {
            this.loaderService = loaderService;
            /**
             * Emits when an error occurs when attempting to render the control.
             */
            this.error = new core.EventEmitter();
            /**
             * The control is ready to accept user interaction and for external method calls.
             *
             * Alternatively, you can listen for a ready event on the dashboard holding the control
             * and call control methods only after the event was fired.
             */
            this.ready = new core.EventEmitter();
            /**
             * Emits when the user interacts with the control, affecting its state.
             * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.
             *
             * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.
             */
            this.stateChange = new core.EventEmitter();
            /**
             * A generated id assigned to this components DOM element.
             */
            this.id = generateRandomId();
            this.wrapperReadySubject = new rxjs.ReplaySubject(1);
            this.initialized = false;
        }
        Object.defineProperty(ControlWrapperComponent.prototype, "wrapperReady$", {
            /**
             * Emits after the `ControlWrapper` was created.
             */
            get: function () {
                return this.wrapperReadySubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlWrapperComponent.prototype, "controlWrapper", {
            get: function () {
                return this._controlWrapper;
            },
            enumerable: true,
            configurable: true
        });
        ControlWrapperComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loaderService.loadChartPackages('controls').subscribe(function () {
                _this.createControlWrapper();
                _this.initialized = true;
            });
        };
        ControlWrapperComponent.prototype.ngOnChanges = function (changes) {
            if (!this.initialized) {
                return;
            }
            if (changes.type) {
                this._controlWrapper.setControlType(this.type);
            }
            if (changes.options) {
                this._controlWrapper.setOptions(this.options);
            }
            if (changes.state) {
                this._controlWrapper.setState(this.state);
            }
        };
        ControlWrapperComponent.prototype.createControlWrapper = function () {
            this._controlWrapper = new google.visualization.ControlWrapper({
                containerId: this.id,
                controlType: this.type,
                state: this.state,
                options: this.options
            });
            this.addEventListeners();
            this.wrapperReadySubject.next(this._controlWrapper);
        };
        ControlWrapperComponent.prototype.addEventListeners = function () {
            var _this = this;
            google.visualization.events.removeAllListeners(this._controlWrapper);
            google.visualization.events.addListener(this._controlWrapper, 'ready', function (event) { return _this.ready.emit(event); });
            google.visualization.events.addListener(this._controlWrapper, 'error', function (event) { return _this.error.emit(event); });
            google.visualization.events.addListener(this._controlWrapper, 'statechange', function (event) { return _this.stateChange.emit(event); });
        };
        ControlWrapperComponent.ctorParameters = function () { return [
            { type: ScriptLoaderService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ControlWrapperComponent.prototype, "for", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], ControlWrapperComponent.prototype, "type", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ControlWrapperComponent.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ControlWrapperComponent.prototype, "state", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], ControlWrapperComponent.prototype, "error", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], ControlWrapperComponent.prototype, "ready", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], ControlWrapperComponent.prototype, "stateChange", void 0);
        __decorate([
            core.HostBinding('id'),
            __metadata("design:type", Object)
        ], ControlWrapperComponent.prototype, "id", void 0);
        ControlWrapperComponent = __decorate([
            core.Component({
                selector: 'control-wrapper',
                template: '',
                host: { class: 'control-wrapper' },
                exportAs: 'controlWrapper',
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __metadata("design:paramtypes", [ScriptLoaderService])
        ], ControlWrapperComponent);
        return ControlWrapperComponent;
    }());

    var DashboardComponent = /** @class */ (function () {
        function DashboardComponent(element, loaderService) {
            this.element = element;
            this.loaderService = loaderService;
            /**
             * The dashboard has completed drawing and is ready to accept changes.
             *
             * The ready event will also fire:
             * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,
             * - after redrawing any chart on the dashboard.
             */
            this.ready = new core.EventEmitter();
            /**
             * Emits when an error occurs when attempting to render the dashboard.
             * One or more of the controls and charts that are part of the dashboard may have failed rendering.
             */
            this.error = new core.EventEmitter();
            this.initialized = false;
        }
        DashboardComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loaderService.loadChartPackages('controls').subscribe(function () {
                _this.createDataTable();
                _this.createDashboard();
                _this.initialized = true;
            });
        };
        DashboardComponent.prototype.ngOnChanges = function (changes) {
            if (!this.initialized) {
                return;
            }
            if (changes.data || changes.columns) {
                this.createDataTable();
                this.dashboard.draw(this.dataTable);
            }
        };
        DashboardComponent.prototype.createDashboard = function () {
            var _this = this;
            // TODO: This should happen in the control wrapper
            // However, I don't yet know how to do this because then `bind()` would get called multiple times
            // for the same control if something changes. This is not supported by google charts as far as I can tell
            // from their source code.
            var controlWrappersReady$ = this.controlWrappers.map(function (control) { return control.wrapperReady$; });
            var chartsReady$ = this.controlWrappers
                .map(function (control) { return control.for; })
                .map(function (charts) {
                if (Array.isArray(charts)) {
                    // CombineLatest waits for all observables
                    return rxjs.combineLatest(charts.map(function (chart) { return chart.wrapperReady$; }));
                }
                else {
                    return charts.wrapperReady$;
                }
            });
            // We have to wait for all chart wrappers and control wrappers to be initialized
            // before we can compose them together to create the dashboard
            rxjs.combineLatest(__spread(controlWrappersReady$, chartsReady$)).subscribe(function () {
                _this.dashboard = new google.visualization.Dashboard(_this.element.nativeElement);
                _this.initializeBindings();
                _this.dashboard.draw(_this.dataTable);
            });
        };
        DashboardComponent.prototype.initializeBindings = function () {
            var _this = this;
            this.controlWrappers.forEach(function (control) {
                if (Array.isArray(control.for)) {
                    var chartWrappers = control.for.map(function (chart) { return chart.chartWrapper; });
                    _this.dashboard.bind(control.controlWrapper, chartWrappers);
                }
                else {
                    _this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);
                }
            });
        };
        DashboardComponent.prototype.createDataTable = function () {
            if (this.data == null) {
                return;
            }
            var firstRowIsData = true;
            if (this.columns != null) {
                firstRowIsData = false;
            }
            this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);
        };
        DashboardComponent.prototype.getDataAsTable = function () {
            if (this.columns) {
                return __spread([this.columns], this.data);
            }
            else {
                return this.data;
            }
        };
        DashboardComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: ScriptLoaderService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], DashboardComponent.prototype, "data", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], DashboardComponent.prototype, "columns", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DashboardComponent.prototype, "ready", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DashboardComponent.prototype, "error", void 0);
        __decorate([
            core.ContentChildren(ControlWrapperComponent),
            __metadata("design:type", core.QueryList)
        ], DashboardComponent.prototype, "controlWrappers", void 0);
        DashboardComponent = __decorate([
            core.Component({
                selector: 'dashboard',
                template: '<ng-content></ng-content>',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                exportAs: 'dashboard',
                host: { class: 'dashboard' }
            }),
            __metadata("design:paramtypes", [core.ElementRef, ScriptLoaderService])
        ], DashboardComponent);
        return DashboardComponent;
    }());

    var GoogleChartComponent = /** @class */ (function () {
        function GoogleChartComponent(element, scriptLoaderService, dashboard) {
            this.element = element;
            this.scriptLoaderService = scriptLoaderService;
            this.dashboard = dashboard;
            /**
             * The chart-specific options. All options listen in the Google Charts documentation applying
             * to the chart type specified can be used here.
             */
            this.options = {};
            /**
             * If this is set to `true`, the chart will be redrawn if the browser window is resized.
             * Defaults to `false` and should only be used when specifying the width or height of the chart
             * in percent.
             *
             * Note that this can impact performance.
             */
            this.dynamicResize = false;
            this.ready = new core.EventEmitter();
            this.error = new core.EventEmitter();
            this.select = new core.EventEmitter();
            this.mouseover = new core.EventEmitter();
            this.mouseleave = new core.EventEmitter();
            this.wrapperReadySubject = new rxjs.ReplaySubject(1);
            this.initialized = false;
        }
        Object.defineProperty(GoogleChartComponent.prototype, "chart", {
            get: function () {
                if (!this.wrapper) {
                    return null;
                }
                return this.wrapper.getChart();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GoogleChartComponent.prototype, "wrapperReady$", {
            get: function () {
                return this.wrapperReadySubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GoogleChartComponent.prototype, "chartWrapper", {
            get: function () {
                return this.wrapper;
            },
            set: function (wrapper) {
                this.wrapper = wrapper;
                this.drawChart();
            },
            enumerable: true,
            configurable: true
        });
        GoogleChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            // We don't need to load any chart packages, the chart wrapper will handle this for us
            this.scriptLoaderService.loadChartPackages().subscribe(function () {
                _this.createDataTable();
                // Only ever create the wrapper once to allow animations to happen when someting changes.
                _this.wrapper = new google.visualization.ChartWrapper({
                    container: _this.element.nativeElement,
                    chartType: _this.type,
                    dataTable: _this.dataTable,
                    options: _this.mergeOptions()
                });
                _this.registerChartEvents();
                _this.wrapperReadySubject.next(_this.wrapper);
                _this.initialized = true;
                _this.drawChart();
            });
        };
        GoogleChartComponent.prototype.ngOnChanges = function (changes) {
            if (changes.dynamicResize) {
                this.updateResizeListener();
            }
            if (this.initialized) {
                var shouldRedraw = false;
                if (changes.data || changes.columns || changes.formatters) {
                    this.createDataTable();
                    this.wrapper.setDataTable(this.dataTable);
                    shouldRedraw = true;
                }
                if (changes.type) {
                    this.wrapper.setChartType(this.type);
                    shouldRedraw = true;
                }
                if (changes.options || changes.width || changes.height || changes.title) {
                    this.wrapper.setOptions(this.mergeOptions());
                    shouldRedraw = true;
                }
                if (shouldRedraw) {
                    this.drawChart();
                }
            }
        };
        GoogleChartComponent.prototype.createDataTable = function () {
            if (this.data == null) {
                return;
            }
            var firstRowIsData = true;
            if (this.columns != null) {
                firstRowIsData = false;
            }
            this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);
            this.applyFormatters(this.dataTable);
        };
        GoogleChartComponent.prototype.getDataAsTable = function () {
            if (this.columns) {
                return __spread([this.columns], this.data);
            }
            else {
                return this.data;
            }
        };
        GoogleChartComponent.prototype.updateResizeListener = function () {
            var _this = this;
            if (this.resizeSubscription != null) {
                this.resizeSubscription.unsubscribe();
                this.resizeSubscription = null;
            }
            if (this.dynamicResize) {
                this.resizeSubscription = rxjs.fromEvent(window, 'resize')
                    .pipe(operators.debounceTime(100))
                    .subscribe(function () {
                    if (_this.initialized) {
                        _this.drawChart();
                    }
                });
            }
        };
        GoogleChartComponent.prototype.mergeOptions = function () {
            return __assign({ title: this.title, width: this.width, height: this.height }, this.options);
        };
        GoogleChartComponent.prototype.applyFormatters = function (dataTable) {
            var e_1, _a;
            if (this.formatters == null) {
                return;
            }
            try {
                for (var _b = __values(this.formatters), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var val = _c.value;
                    val.formatter.format(dataTable, val.colIndex);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        GoogleChartComponent.prototype.registerChartEvents = function () {
            var _this = this;
            google.visualization.events.removeAllListeners(this.wrapper);
            var registerChartEvent = function (object, eventName, callback) {
                google.visualization.events.addListener(object, eventName, callback);
            };
            registerChartEvent(this.wrapper, 'ready', function () {
                // This could also be done by checking if we already subscribed to the events
                google.visualization.events.removeAllListeners(_this.chart);
                registerChartEvent(_this.chart, 'onmouseover', function (event) { return _this.mouseover.emit(event); });
                registerChartEvent(_this.chart, 'onmouseout', function (event) { return _this.mouseleave.emit(event); });
                registerChartEvent(_this.chart, 'select', function () {
                    var selection = _this.chart.getSelection();
                    _this.select.emit({ selection: selection });
                });
                _this.ready.emit({ chart: _this.chart });
            });
            registerChartEvent(this.wrapper, 'error', function (error) { return _this.error.emit(error); });
        };
        GoogleChartComponent.prototype.drawChart = function () {
            if (this.dashboard != null) {
                // If this chart is part of a dashboard, the dashboard takes care of drawing
                return;
            }
            this.wrapper.draw();
        };
        GoogleChartComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: ScriptLoaderService },
            { type: DashboardComponent, decorators: [{ type: core.Optional }] }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], GoogleChartComponent.prototype, "type", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], GoogleChartComponent.prototype, "data", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], GoogleChartComponent.prototype, "columns", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], GoogleChartComponent.prototype, "title", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], GoogleChartComponent.prototype, "width", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], GoogleChartComponent.prototype, "height", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], GoogleChartComponent.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], GoogleChartComponent.prototype, "formatters", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], GoogleChartComponent.prototype, "dynamicResize", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], GoogleChartComponent.prototype, "ready", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], GoogleChartComponent.prototype, "error", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], GoogleChartComponent.prototype, "select", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], GoogleChartComponent.prototype, "mouseover", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], GoogleChartComponent.prototype, "mouseleave", void 0);
        GoogleChartComponent = __decorate([
            core.Component({
                selector: 'google-chart',
                template: '',
                host: { class: 'google-chart' },
                exportAs: 'googleChart',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [':host { width: fit-content; display: block; }']
            }),
            __param(2, core.Optional()),
            __metadata("design:paramtypes", [core.ElementRef,
                ScriptLoaderService,
                DashboardComponent])
        ], GoogleChartComponent);
        return GoogleChartComponent;
    }());

    var ChartWrapperComponent = /** @class */ (function () {
        function ChartWrapperComponent(element, scriptLoaderService) {
            this.element = element;
            this.scriptLoaderService = scriptLoaderService;
            this.error = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.select = new core.EventEmitter();
            this.wrapperReadySubject = new rxjs.ReplaySubject(1);
            this.initialized = false;
        }
        Object.defineProperty(ChartWrapperComponent.prototype, "chart", {
            get: function () {
                if (!this.wrapper) {
                    return null;
                }
                return this.wrapper.getChart();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartWrapperComponent.prototype, "wrapperReady$", {
            get: function () {
                return this.wrapperReadySubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartWrapperComponent.prototype, "chartWrapper", {
            get: function () {
                return this.wrapper;
            },
            set: function (wrapper) {
                this.wrapper = wrapper;
                this.drawChart();
            },
            enumerable: true,
            configurable: true
        });
        ChartWrapperComponent.prototype.ngOnInit = function () {
            var _this = this;
            // We don't need to load any chart packages, the chart wrapper will handle this else for us
            this.scriptLoaderService.loadChartPackages().subscribe(function () {
                if (!_this.specs) {
                    _this.specs = {};
                }
                var _a = _this.specs, containerId = _a.containerId, container = _a.container, specs = __rest(_a, ["containerId", "container"]);
                // Only ever create the wrapper once to allow animations to happen if something changes.
                _this.wrapper = new google.visualization.ChartWrapper(__assign(__assign({}, specs), { container: _this.element.nativeElement }));
                _this.registerChartEvents();
                _this.wrapperReadySubject.next(_this.wrapper);
                _this.drawChart();
                _this.initialized = true;
            });
        };
        ChartWrapperComponent.prototype.ngOnChanges = function (changes) {
            if (!this.initialized) {
                return;
            }
            if (changes.specs) {
                this.updateChart();
                this.drawChart();
            }
        };
        ChartWrapperComponent.prototype.updateChart = function () {
            if (!this.specs) {
                // When creating the wrapper with empty specs, the google charts library will show an error
                // If we don't do this, a javascript error will be thrown, which is not as visible to the user
                this.specs = {};
            }
            this.wrapper.setChartType(this.specs.chartType);
            this.wrapper.setDataTable(this.specs.dataTable); // The typing here are not correct, this also accepts plain arrays
            this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);
            this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);
            this.wrapper.setQuery(this.specs.query);
            this.wrapper.setOptions(this.specs.options);
            this.wrapper.setRefreshInterval(this.specs.refreshInterval);
            this.wrapper.setView(this.specs.view);
        };
        ChartWrapperComponent.prototype.drawChart = function () {
            this.wrapper.draw();
        };
        ChartWrapperComponent.prototype.registerChartEvents = function () {
            var _this = this;
            google.visualization.events.removeAllListeners(this.wrapper);
            var registerChartEvent = function (object, eventName, callback) {
                google.visualization.events.addListener(object, eventName, callback);
            };
            registerChartEvent(this.wrapper, 'ready', function () { return _this.ready.emit({ chart: _this.chart }); });
            registerChartEvent(this.wrapper, 'error', function (error) { return _this.error.emit(error); });
            registerChartEvent(this.wrapper, 'select', function () {
                var selection = _this.chart.getSelection();
                _this.select.emit({ selection: selection });
            });
        };
        ChartWrapperComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: ScriptLoaderService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ChartWrapperComponent.prototype, "specs", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], ChartWrapperComponent.prototype, "error", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], ChartWrapperComponent.prototype, "ready", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], ChartWrapperComponent.prototype, "select", void 0);
        ChartWrapperComponent = __decorate([
            core.Component({
                selector: 'chart-wrapper',
                template: '',
                host: { class: 'chart-wrapper' },
                exportAs: 'chartWrapper',
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: [':host { width: fit-content; display: block; }']
            }),
            __metadata("design:paramtypes", [core.ElementRef, ScriptLoaderService])
        ], ChartWrapperComponent);
        return ChartWrapperComponent;
    }());

    var _a;
    var ChartTypesToPackages = (_a = {},
        _a[exports.ChartType.AnnotationChart] = 'annotationchart',
        _a[exports.ChartType.AreaChart] = 'corechart',
        _a[exports.ChartType.Bar] = 'bar',
        _a[exports.ChartType.BarChart] = 'corechart',
        _a[exports.ChartType.BubbleChart] = 'corechart',
        _a[exports.ChartType.Calendar] = 'calendar',
        _a[exports.ChartType.CandlestickChart] = 'corechart',
        _a[exports.ChartType.ColumnChart] = 'corechart',
        _a[exports.ChartType.ComboChart] = 'corechart',
        _a[exports.ChartType.PieChart] = 'corechart',
        _a[exports.ChartType.Gantt] = 'gantt',
        _a[exports.ChartType.Gauge] = 'gauge',
        _a[exports.ChartType.GeoChart] = 'geochart',
        _a[exports.ChartType.Histogram] = 'corechart',
        _a[exports.ChartType.Line] = 'line',
        _a[exports.ChartType.LineChart] = 'corechart',
        _a[exports.ChartType.Map] = 'map',
        _a[exports.ChartType.OrgChart] = 'orgchart',
        _a[exports.ChartType.Sankey] = 'sankey',
        _a[exports.ChartType.Scatter] = 'scatter',
        _a[exports.ChartType.ScatterChart] = 'corechart',
        _a[exports.ChartType.SteppedAreaChart] = 'corechart',
        _a[exports.ChartType.Table] = 'table',
        _a[exports.ChartType.Timeline] = 'timeline',
        _a[exports.ChartType.TreeMap] = 'treemap',
        _a[exports.ChartType.WordTree] = 'wordtree',
        _a);
    function getPackageForChart(type) {
        return ChartTypesToPackages[type];
    }

    var GoogleChartsModule = /** @class */ (function () {
        function GoogleChartsModule() {
        }
        GoogleChartsModule_1 = GoogleChartsModule;
        GoogleChartsModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: GoogleChartsModule_1,
                providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]
            };
        };
        var GoogleChartsModule_1;
        GoogleChartsModule = GoogleChartsModule_1 = __decorate([
            core.NgModule({
                declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],
                exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]
            })
        ], GoogleChartsModule);
        return GoogleChartsModule;
    }());

    exports.ChartEditorComponent = ChartEditorComponent;
    exports.ChartEditorRef = ChartEditorRef;
    exports.ChartWrapperComponent = ChartWrapperComponent;
    exports.ControlWrapperComponent = ControlWrapperComponent;
    exports.DashboardComponent = DashboardComponent;
    exports.GoogleChartComponent = GoogleChartComponent;
    exports.GoogleChartsModule = GoogleChartsModule;
    exports.ScriptLoaderService = ScriptLoaderService;
    exports.getPackageForChart = getPackageForChart;
    exports.ɵa = GOOGLE_CHARTS_CONFIG;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-google-charts.umd.js.map
