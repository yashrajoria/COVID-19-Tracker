{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular-google-charts/lib/models/chart-type.model.ts","ng://angular-google-charts/lib/models/control-type.model.ts","ng://angular-google-charts/lib/components/chart-editor/chart-editor-ref.ts","ng://angular-google-charts/lib/models/injection-tokens.model.ts","ng://angular-google-charts/lib/script-loader/script-loader.service.ts","ng://angular-google-charts/lib/components/chart-editor/chart-editor.component.ts","ng://angular-google-charts/lib/components/control-wrapper/control-wrapper.component.ts","ng://angular-google-charts/lib/helpers/id.helper.ts","ng://angular-google-charts/lib/components/dashboard/dashboard.component.ts","ng://angular-google-charts/lib/components/google-chart/google-chart.component.ts","ng://angular-google-charts/lib/components/chart-wrapper/chart-wrapper.component.ts","ng://angular-google-charts/lib/helpers/chart.helper.ts","ng://angular-google-charts/lib/google-charts.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","e","ar","push","error","__spread","concat","ChartType","FilterType","ChartEditorRef","editor","doneSubject","Subject","addEventListeners","afterClosed","asObservable","cancel","closeDialog","_this","google","visualization","events","addOneTimeListener","removeAllListeners","updatedChartWrapper","getChartWrapper","complete","GOOGLE_CHARTS_CONFIG","InjectionToken","DEFAULT_CONFIG","mapsApiKey","version","safeMode","ScriptLoaderService","zone","localeId","config","scriptSource","scriptLoadSubject","isGoogleChartsAvailable","charts","loadChartPackages","packages","_i","loadGoogleCharts","pipe","switchMap","Observable","observer","language","load","setOnLoadCallback","run","of","isLoadingGoogleCharts","script","createGoogleChartsScript","onload","onerror","console","Error","getGoogleChartsScript","Array","from","document","getElementsByTagName","find","src","createElement","type","async","appendChild","NgZone","Inject","args","LOCALE_ID","Optional","Injectable","providedIn","String","ChartEditorComponent","scriptLoaderService","initializedSubject","ngOnInit","subscribe","ChartEditor","editChart","component","options","handle","openDialog","chartWrapper","result","Component","selector","template","host","class","changeDetection","ChangeDetectionStrategy","OnPush","ControlWrapperComponent","loaderService","EventEmitter","ready","stateChange","id","Math","random","toString","substr","wrapperReadySubject","ReplaySubject","initialized","_controlWrapper","createControlWrapper","ngOnChanges","changes","setControlType","setOptions","state","setState","ControlWrapper","containerId","controlType","addListener","event","emit","Input","Output","HostBinding","exportAs","DashboardComponent","element","createDataTable","createDashboard","data","columns","dashboard","draw","dataTable","controlWrappersReady$","controlWrappers","map","control","wrapperReady$","chartsReady$","for","isArray","combineLatest","chart","Dashboard","nativeElement","initializeBindings","forEach","chartWrappers","bind","controlWrapper","firstRowIsData","arrayToDataTable","getDataAsTable","ElementRef","ContentChildren","QueryList","GoogleChartComponent","dynamicResize","select","mouseover","mouseleave","wrapper","getChart","drawChart","ChartWrapper","container","chartType","mergeOptions","registerChartEvents","updateResizeListener","shouldRedraw","formatters","setDataTable","setChartType","width","height","title","applyFormatters","resizeSubscription","unsubscribe","fromEvent","window","debounceTime","_b","_c","val","formatter","format","colIndex","registerChartEvent","object","eventName","callback","selection","getSelection","ChartWrapperComponent","specs","_a","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","updateChart","setDataSourceUrl","dataSourceUrl","setQuery","query","setRefreshInterval","refreshInterval","setView","view","ChartTypesToPackages","AnnotationChart","AreaChart","Bar","BarChart","BubbleChart","Calendar","CandlestickChart","ColumnChart","ComboChart","PieChart","Gantt","Gauge","GeoChart","Histogram","Line","LineChart","Map","OrgChart","Sankey","Scatter","ScatterChart","SteppedAreaChart","Table","Timeline","TreeMap","WordTree","GoogleChartsModule","forRoot","ngModule","GoogleChartsModule_1","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum ChartType {\n  AnnotationChart = 'AnnotationChart',\n  AreaChart = 'AreaChart',\n  Bar = 'Bar',\n  BarChart = 'BarChart',\n  BubbleChart = 'BubbleChart',\n  Calendar = 'Calendar',\n  CandlestickChart = 'CandlestickChart',\n  ColumnChart = 'ColumnChart',\n  ComboChart = 'ComboChart',\n  PieChart = 'PieChart',\n  Gantt = 'Gantt',\n  Gauge = 'Gauge',\n  GeoChart = 'GeoChart',\n  Histogram = 'Histogram',\n  Line = 'Line',\n  LineChart = 'LineChart',\n  Map = 'Map',\n  OrgChart = 'OrgChart',\n  Sankey = 'Sankey',\n  Scatter = 'Scatter',\n  ScatterChart = 'ScatterChart',\n  SteppedAreaChart = 'SteppedAreaChart',\n  Table = 'Table',\n  Timeline = 'Timeline',\n  TreeMap = 'TreeMap',\n  WordTree = 'wordtree'\n}\n","export enum FilterType {\n  Category = 'CategoryFilter',\n  ChartRange = 'ChartRangeFilter',\n  DateRange = 'DateRangeFilter',\n  NumberRange = 'NumberRangeFilter',\n  String = 'StringFilter'\n}\n","import { Observable, Subject } from 'rxjs';\n\nexport type EditChartResult = google.visualization.ChartWrapper | null;\n\nexport class ChartEditorRef {\n  private readonly doneSubject = new Subject<EditChartResult>();\n\n  constructor(private readonly editor: google.visualization.ChartEditor) {\n    this.addEventListeners();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is saved.\n   * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n   */\n  public afterClosed(): Observable<EditChartResult> {\n    return this.doneSubject.asObservable();\n  }\n\n  /**\n   * Stops editing the chart and closes the dialog.\n   */\n  public cancel() {\n    this.editor.closeDialog();\n  }\n\n  private addEventListeners() {\n    google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      const updatedChartWrapper = this.editor.getChartWrapper();\n\n      this.doneSubject.next(updatedChartWrapper);\n      this.doneSubject.complete();\n    });\n\n    google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      this.doneSubject.next(null);\n      this.doneSubject.complete();\n    });\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { GoogleChartsConfig } from './google-charts-config.model';\n\nexport const GOOGLE_CHARTS_CONFIG = new InjectionToken<GoogleChartsConfig>('GOOGLE_CHARTS_CONFIG');\n","import { Inject, Injectable, LOCALE_ID, NgZone, Optional } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { GoogleChartsConfig } from '../models/google-charts-config.model';\nimport { GOOGLE_CHARTS_CONFIG } from '../models/injection-tokens.model';\n\nconst DEFAULT_CONFIG: GoogleChartsConfig = {\n  mapsApiKey: '',\n  version: 'current',\n  safeMode: false\n};\n\n@Injectable({ providedIn: 'root' })\nexport class ScriptLoaderService {\n  private readonly scriptSource = 'https://www.gstatic.com/charts/loader.js';\n  private readonly scriptLoadSubject = new Subject<void>();\n\n  constructor(\n    private zone: NgZone,\n    @Inject(LOCALE_ID) private localeId: string,\n    @Inject(GOOGLE_CHARTS_CONFIG) @Optional() private config?: GoogleChartsConfig\n  ) {\n    this.config = { ...DEFAULT_CONFIG, ...(config || {}) };\n  }\n\n  /**\n   * Checks whether `google.charts` is available.\n   *\n   * If not, it can be loaded by calling `loadChartPackages`.\n   *\n   * @returns `true` if `google.charts` is available, `false` otherwise.\n   */\n  public isGoogleChartsAvailable(): boolean {\n    if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Loads the Google Chart script and the provided chart packages.\n   * Can be called multiple times to load more packages.\n   *\n   * When called without any arguments, this will just load the default package\n   * containing the namespaces `google.charts` and `google.visualization` without any charts.\n   *\n   * @param packages The packages to load.\n   * @returns A stream emitting as soon as the chart packages are loaded.\n   */\n  public loadChartPackages(...packages: string[]): Observable<void> {\n    return this.loadGoogleCharts().pipe(\n      switchMap(() => {\n        return new Observable<void>(observer => {\n          const config = {\n            packages,\n            language: this.localeId,\n            mapsApiKey: this.config.mapsApiKey,\n            safeMode: this.config.safeMode\n          };\n\n          google.charts.load(this.config.version, config);\n          google.charts.setOnLoadCallback(() => {\n            this.zone.run(() => {\n              observer.next();\n              observer.complete();\n            });\n          });\n        });\n      })\n    );\n  }\n\n  /**\n   * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n   *\n   * @returns A stream emitting as soon as loading has completed.\n   * If the google charts script is already loaded, the stream emits immediately.\n   */\n  private loadGoogleCharts() {\n    if (this.isGoogleChartsAvailable()) {\n      return of(null);\n    } else if (!this.isLoadingGoogleCharts()) {\n      const script = this.createGoogleChartsScript();\n      script.onload = () => {\n        this.zone.run(() => {\n          this.scriptLoadSubject.next();\n          this.scriptLoadSubject.complete();\n        });\n      };\n\n      script.onerror = () => {\n        this.zone.run(() => {\n          console.error('Failed to load the google charts script!');\n          this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n        });\n      };\n    }\n\n    return this.scriptLoadSubject.asObservable();\n  }\n\n  private isLoadingGoogleCharts() {\n    return this.getGoogleChartsScript() != null;\n  }\n\n  private getGoogleChartsScript(): HTMLScriptElement | null {\n    const pageScripts = Array.from(document.getElementsByTagName('script'));\n    return pageScripts.find(script => script.src === this.scriptSource);\n  }\n\n  private createGoogleChartsScript(): HTMLScriptElement {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = this.scriptSource;\n    script.async = true;\n    document.getElementsByTagName('head')[0].appendChild(script);\n    return script;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\nimport { ChartEditorRef } from './chart-editor-ref';\n\n@Component({\n  selector: 'chart-editor',\n  template: `<ng-content></ng-content>`,\n  host: { class: 'chart-editor' },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartEditorComponent implements OnInit {\n  private editor: google.visualization.ChartEditor;\n  private initializedSubject = new Subject<google.visualization.ChartEditor>();\n\n  constructor(private scriptLoaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits as soon as the chart editor is fully initialized.\n   */\n  public get initialized$() {\n    return this.initializedSubject.asObservable();\n  }\n\n  public ngOnInit() {\n    this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n      this.editor = new google.visualization.ChartEditor();\n      this.initializedSubject.next(this.editor);\n      this.initializedSubject.complete();\n    });\n  }\n\n  /**\n   * Opens the chart editor as an embedded dialog box on the page.\n   * If the editor gets saved, the components' chart will be updated with the result.\n   *\n   * @param component The chart to be edited.\n   * @returns A reference to the open editor.\n   */\n  public editChart(component: ChartBase): ChartEditorRef;\n  public editChart(component: ChartBase, options: google.visualization.ChartEditorOptions): ChartEditorRef;\n  public editChart(component: ChartBase, options?: google.visualization.ChartEditorOptions) {\n    const handle = new ChartEditorRef(this.editor);\n    this.editor.openDialog(component.chartWrapper, options || {});\n\n    handle.afterClosed().subscribe(result => {\n      if (result) {\n        component.chartWrapper = result;\n      }\n    });\n\n    return handle;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { generateRandomId } from '../../helpers/id.helper';\nimport { FilterType } from '../../models/control-type.model';\nimport { ChartErrorEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'control-wrapper',\n  template: '',\n  host: { class: 'control-wrapper' },\n  exportAs: 'controlWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ControlWrapperComponent implements OnInit, OnChanges {\n  /**\n   * Charts controlled by this control wrapper. Can be a single chart or an array of charts.\n   */\n  @Input()\n  public for!: ChartBase | ChartBase[];\n\n  /**\n   * The class name of the control.\n   * The `google.visualization` package name can be omitted for Google controls.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper type=\"CategoryFilter\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public type!: FilterType;\n\n  /**\n   * An object describing the options for the control.\n   * You can use either JavaScript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper [options]=\"{'filterColumnLabel': 'Age', 'minValue': 10, 'maxValue': 80}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public options?: object;\n\n  /**\n   * An object describing the state of the control.\n   * The state collects all the variables that the user operating the control can affect.\n   *\n   * For example, a range slider state can be described in term of the positions that the low and high thumb\n   * of the slider occupy.\n   * You can use either Javascript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   *  ```html\n   * <control-wrapper [state]=\"{'lowValue': 20, 'highValue': 50}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public state?: object;\n\n  /**\n   * Emits when an error occurs when attempting to render the control.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  /**\n   * The control is ready to accept user interaction and for external method calls.\n   *\n   * Alternatively, you can listen for a ready event on the dashboard holding the control\n   * and call control methods only after the event was fired.\n   */\n  @Output()\n  public ready = new EventEmitter<void>();\n\n  /**\n   * Emits when the user interacts with the control, affecting its state.\n   * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n   *\n   * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n   */\n  @Output()\n  public stateChange = new EventEmitter<void>();\n\n  /**\n   * A generated id assigned to this components DOM element.\n   */\n  @HostBinding('id')\n  public readonly id = generateRandomId();\n\n  private _controlWrapper: google.visualization.ControlWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ControlWrapper>(1);\n  private initialized = false;\n\n  constructor(private loaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits after the `ControlWrapper` was created.\n   */\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get controlWrapper(): google.visualization.ControlWrapper | null {\n    return this._controlWrapper;\n  }\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createControlWrapper();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.type) {\n      this._controlWrapper.setControlType(this.type);\n    }\n\n    if (changes.options) {\n      this._controlWrapper.setOptions(this.options);\n    }\n\n    if (changes.state) {\n      this._controlWrapper.setState(this.state);\n    }\n  }\n\n  private createControlWrapper() {\n    this._controlWrapper = new google.visualization.ControlWrapper({\n      containerId: this.id,\n      controlType: this.type,\n      state: this.state,\n      options: this.options\n    });\n\n    this.addEventListeners();\n    this.wrapperReadySubject.next(this._controlWrapper);\n  }\n\n  private addEventListeners() {\n    google.visualization.events.removeAllListeners(this._controlWrapper);\n\n    google.visualization.events.addListener(this._controlWrapper, 'ready', event => this.ready.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'error', event => this.error.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'statechange', event => this.stateChange.emit(event));\n  }\n}\n","/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nexport function generateRandomId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges\n} from '@angular/core';\nimport { combineLatest } from 'rxjs';\n\nimport { ChartErrorEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { Column, Row } from '../chart-base/chart-base.component';\nimport { ControlWrapperComponent } from '../control-wrapper/control-wrapper.component';\n\n@Component({\n  selector: 'dashboard',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'dashboard',\n  host: { class: 'dashboard' }\n})\nexport class DashboardComponent implements OnInit, OnChanges {\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns: Column[];\n\n  /**\n   * The dashboard has completed drawing and is ready to accept changes.\n   *\n   * The ready event will also fire:\n   * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n   * - after redrawing any chart on the dashboard.\n   */\n  @Output()\n  public ready = new EventEmitter<void>();\n\n  /**\n   * Emits when an error occurs when attempting to render the dashboard.\n   * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @ContentChildren(ControlWrapperComponent)\n  private controlWrappers: QueryList<ControlWrapperComponent>;\n\n  private dashboard: google.visualization.Dashboard;\n  private dataTable: google.visualization.DataTable;\n  private initialized = false;\n\n  constructor(private element: ElementRef, private loaderService: ScriptLoaderService) {}\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createDataTable();\n      this.createDashboard();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.data || changes.columns) {\n      this.createDataTable();\n      this.dashboard.draw(this.dataTable);\n    }\n  }\n\n  private createDashboard() {\n    // TODO: This should happen in the control wrapper\n    // However, I don't yet know how to do this because then `bind()` would get called multiple times\n    // for the same control if something changes. This is not supported by google charts as far as I can tell\n    // from their source code.\n    const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n    const chartsReady$ = this.controlWrappers\n      .map(control => control.for)\n      .map(charts => {\n        if (Array.isArray(charts)) {\n          // CombineLatest waits for all observables\n          return combineLatest(charts.map(chart => chart.wrapperReady$));\n        } else {\n          return charts.wrapperReady$;\n        }\n      });\n\n    // We have to wait for all chart wrappers and control wrappers to be initialized\n    // before we can compose them together to create the dashboard\n    combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n      this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n      this.initializeBindings();\n      this.dashboard.draw(this.dataTable);\n    });\n  }\n\n  private initializeBindings() {\n    this.controlWrappers.forEach(control => {\n      if (Array.isArray(control.for)) {\n        const chartWrappers = control.for.map(chart => chart.chartWrapper);\n        this.dashboard.bind(control.controlWrapper, chartWrappers);\n      } else {\n        this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n      }\n    });\n  }\n\n  private createDataTable() {\n    if (this.data == null) {\n      return;\n    }\n\n    let firstRowIsData = true;\n    if (this.columns != null) {\n      firstRowIsData = false;\n    }\n\n    this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);\n  }\n\n  private getDataAsTable(): (Row | Column[])[] {\n    if (this.columns) {\n      return [this.columns, ...this.data];\n    } else {\n      return this.data;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { fromEvent, ReplaySubject, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { ChartType } from '../../models/chart-type.model';\nimport {\n  ChartErrorEvent,\n  ChartMouseLeaveEvent,\n  ChartMouseOverEvent,\n  ChartReadyEvent,\n  ChartSelectionChangedEvent\n} from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase, Column, Row } from '../chart-base/chart-base.component';\nimport { DashboardComponent } from '../dashboard/dashboard.component';\n\nexport interface Formatter {\n  formatter: google.visualization.DefaultFormatter;\n  colIndex: number;\n}\n\n@Component({\n  selector: 'google-chart',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'google-chart' },\n  exportAs: 'googleChart',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GoogleChartComponent implements ChartBase, OnChanges, OnInit {\n  /**\n   * The type of the chart to create.\n   */\n  @Input()\n  public type!: ChartType;\n\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns: Column[];\n\n  /**\n   * A convenience property used to set the title of the chart.\n   *\n   * This can also be set using `options.title`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public title?: string;\n\n  /**\n   * A convenience property used to set the width of the chart in pixels.\n   *\n   * This can also be set using `options.width`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public width?: number;\n\n  /**\n   * A convenience property used to set the height of the chart in pixels.\n   *\n   * This can also be set using `options.height`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public height?: number;\n\n  /**\n   * The chart-specific options. All options listen in the Google Charts documentation applying\n   * to the chart type specified can be used here.\n   */\n  @Input()\n  public options: object = {};\n\n  /**\n   * Used to change the displayed value of the specified column in all rows.\n   *\n   * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)\n   * and the index of the column you want the formatter to get applied to.\n   */\n  @Input()\n  public formatters?: Formatter[];\n\n  /**\n   * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n   * Defaults to `false` and should only be used when specifying the width or height of the chart\n   * in percent.\n   *\n   * Note that this can impact performance.\n   */\n  @Input()\n  public dynamicResize = false;\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  @Output()\n  public mouseover = new EventEmitter<ChartMouseOverEvent>();\n\n  @Output()\n  public mouseleave = new EventEmitter<ChartMouseLeaveEvent>();\n\n  private dataTable: google.visualization.DataTable;\n  private resizeSubscription: Subscription;\n\n  private wrapper: google.visualization.ChartWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n\n  constructor(\n    private element: ElementRef,\n    private scriptLoaderService: ScriptLoaderService,\n    @Optional() private dashboard?: DashboardComponent\n  ) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    if (!this.wrapper) {\n      return null;\n    }\n\n    return this.wrapper.getChart();\n  }\n\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper {\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      this.createDataTable();\n\n      // Only ever create the wrapper once to allow animations to happen when someting changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        container: this.element.nativeElement,\n        chartType: this.type,\n        dataTable: this.dataTable,\n        options: this.mergeOptions()\n      });\n\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n      this.initialized = true;\n\n      this.drawChart();\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.dynamicResize) {\n      this.updateResizeListener();\n    }\n\n    if (this.initialized) {\n      let shouldRedraw = false;\n      if (changes.data || changes.columns || changes.formatters) {\n        this.createDataTable();\n        this.wrapper.setDataTable(this.dataTable);\n        shouldRedraw = true;\n      }\n\n      if (changes.type) {\n        this.wrapper.setChartType(this.type);\n        shouldRedraw = true;\n      }\n\n      if (changes.options || changes.width || changes.height || changes.title) {\n        this.wrapper.setOptions(this.mergeOptions());\n        shouldRedraw = true;\n      }\n\n      if (shouldRedraw) {\n        this.drawChart();\n      }\n    }\n  }\n\n  private createDataTable() {\n    if (this.data == null) {\n      return;\n    }\n\n    let firstRowIsData = true;\n    if (this.columns != null) {\n      firstRowIsData = false;\n    }\n\n    this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);\n    this.applyFormatters(this.dataTable);\n  }\n\n  private getDataAsTable(): (Row | Column[])[] {\n    if (this.columns) {\n      return [this.columns, ...this.data];\n    } else {\n      return this.data;\n    }\n  }\n\n  private updateResizeListener() {\n    if (this.resizeSubscription != null) {\n      this.resizeSubscription.unsubscribe();\n      this.resizeSubscription = null;\n    }\n\n    if (this.dynamicResize) {\n      this.resizeSubscription = fromEvent(window, 'resize')\n        .pipe(debounceTime(100))\n        .subscribe(() => {\n          if (this.initialized) {\n            this.drawChart();\n          }\n        });\n    }\n  }\n\n  private mergeOptions(): object {\n    return {\n      title: this.title,\n      width: this.width,\n      height: this.height,\n      ...this.options\n    };\n  }\n\n  private applyFormatters(dataTable: google.visualization.DataTable): void {\n    if (this.formatters == null) {\n      return;\n    }\n\n    for (const val of this.formatters) {\n      val.formatter.format(dataTable, val.colIndex);\n    }\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => {\n      // This could also be done by checking if we already subscribed to the events\n      google.visualization.events.removeAllListeners(this.chart);\n      registerChartEvent(this.chart, 'onmouseover', (event: ChartMouseOverEvent) => this.mouseover.emit(event));\n      registerChartEvent(this.chart, 'onmouseout', (event: ChartMouseLeaveEvent) => this.mouseleave.emit(event));\n      registerChartEvent(this.chart, 'select', () => {\n        const selection = this.chart.getSelection();\n        this.select.emit({ selection });\n      });\n\n      this.ready.emit({ chart: this.chart });\n    });\n\n    registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n  }\n\n  private drawChart() {\n    if (this.dashboard != null) {\n      // If this chart is part of a dashboard, the dashboard takes care of drawing\n      return;\n    }\n\n    this.wrapper.draw();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { ChartErrorEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'chart-wrapper',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'chart-wrapper' },\n  exportAs: 'chartWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartWrapperComponent implements ChartBase, OnChanges, OnInit {\n  /**\n   * Either a JSON object defining the chart, or a serialized string version of that object.\n   * The format of this object is shown in the\n   * {@link https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart `drawChart()`} documentation.\n   *\n   * The `container` and `containerId` will be overwritten by this component to allow\n   * rendering the chart into the components' template.\n   */\n  @Input()\n  public specs: google.visualization.ChartSpecs;\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  private wrapper: google.visualization.ChartWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n\n  constructor(private element: ElementRef, private scriptLoaderService: ScriptLoaderService) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    if (!this.wrapper) {\n      return null;\n    }\n\n    return this.wrapper.getChart();\n  }\n\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper | null {\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this else for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      if (!this.specs) {\n        this.specs = {} as google.visualization.ChartSpecs;\n      }\n\n      const { containerId, container, ...specs } = this.specs;\n\n      // Only ever create the wrapper once to allow animations to happen if something changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        ...specs,\n        container: this.element.nativeElement\n      });\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n\n      this.drawChart();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.specs) {\n      this.updateChart();\n      this.drawChart();\n    }\n  }\n\n  private updateChart() {\n    if (!this.specs) {\n      // When creating the wrapper with empty specs, the google charts library will show an error\n      // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n      this.specs = {} as google.visualization.ChartSpecs;\n    }\n\n    this.wrapper.setChartType(this.specs.chartType);\n    this.wrapper.setDataTable(this.specs.dataTable as any); // The typing here are not correct, this also accepts plain arrays\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setQuery(this.specs.query);\n    this.wrapper.setOptions(this.specs.options);\n    this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n    this.wrapper.setView(this.specs.view);\n  }\n\n  private drawChart() {\n    this.wrapper.draw();\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart }));\n    registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n    registerChartEvent(this.wrapper, 'select', () => {\n      const selection = this.chart.getSelection();\n      this.select.emit({ selection });\n    });\n  }\n}\n","import { ChartType } from '../models/chart-type.model';\n\nconst ChartTypesToPackages = {\n  [ChartType.AnnotationChart]: 'annotationchart',\n  [ChartType.AreaChart]: 'corechart',\n  [ChartType.Bar]: 'bar',\n  [ChartType.BarChart]: 'corechart',\n  [ChartType.BubbleChart]: 'corechart',\n  [ChartType.Calendar]: 'calendar',\n  [ChartType.CandlestickChart]: 'corechart',\n  [ChartType.ColumnChart]: 'corechart',\n  [ChartType.ComboChart]: 'corechart',\n  [ChartType.PieChart]: 'corechart',\n  [ChartType.Gantt]: 'gantt',\n  [ChartType.Gauge]: 'gauge',\n  [ChartType.GeoChart]: 'geochart',\n  [ChartType.Histogram]: 'corechart',\n  [ChartType.Line]: 'line',\n  [ChartType.LineChart]: 'corechart',\n  [ChartType.Map]: 'map',\n  [ChartType.OrgChart]: 'orgchart',\n  [ChartType.Sankey]: 'sankey',\n  [ChartType.Scatter]: 'scatter',\n  [ChartType.ScatterChart]: 'corechart',\n  [ChartType.SteppedAreaChart]: 'corechart',\n  [ChartType.Table]: 'table',\n  [ChartType.Timeline]: 'timeline',\n  [ChartType.TreeMap]: 'treemap',\n  [ChartType.WordTree]: 'wordtree'\n};\n\nexport function getPackageForChart(type: ChartType): string {\n  return ChartTypesToPackages[type];\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ChartEditorComponent } from './components/chart-editor/chart-editor.component';\nimport { ChartWrapperComponent } from './components/chart-wrapper/chart-wrapper.component';\nimport { ControlWrapperComponent } from './components/control-wrapper/control-wrapper.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { GoogleChartComponent } from './components/google-chart/google-chart.component';\nimport { GoogleChartsConfig } from './models/google-charts-config.model';\nimport { GOOGLE_CHARTS_CONFIG } from './models/injection-tokens.model';\n\n@NgModule({\n  declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],\n  exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]\n})\nexport class GoogleChartsModule {\n  public static forRoot(config: GoogleChartsConfig = {}): ModuleWithProviders<GoogleChartsModule> {\n    return {\n      ngModule: GoogleChartsModule,\n      providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]\n    };\n  }\n}\n"]}