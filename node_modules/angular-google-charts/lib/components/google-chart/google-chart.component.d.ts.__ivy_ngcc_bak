/// <reference types="@types/google.visualization" />
import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ChartType } from '../../models/chart-type.model';
import { ChartErrorEvent, ChartMouseLeaveEvent, ChartMouseOverEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../models/events.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ChartBase, Column, Row } from '../chart-base/chart-base.component';
import { DashboardComponent } from '../dashboard/dashboard.component';
export interface Formatter {
    formatter: google.visualization.DefaultFormatter;
    colIndex: number;
}
export declare class GoogleChartComponent implements ChartBase, OnChanges, OnInit {
    private element;
    private scriptLoaderService;
    private dashboard?;
    /**
     * The type of the chart to create.
     */
    type: ChartType;
    /**
     * Data used to initialize the table.
     *
     * This must also contain all roles that are set in the `columns` property.
     */
    data: Row[];
    /**
     * The columns the `data` consists of.
     * The length of this array must match the length of each row in the `data` object.
     *
     * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.
     */
    columns: Column[];
    /**
     * A convenience property used to set the title of the chart.
     *
     * This can also be set using `options.title`, which, if existant, will overwrite this value.
     */
    title?: string;
    /**
     * A convenience property used to set the width of the chart in pixels.
     *
     * This can also be set using `options.width`, which, if existant, will overwrite this value.
     */
    width?: number;
    /**
     * A convenience property used to set the height of the chart in pixels.
     *
     * This can also be set using `options.height`, which, if existant, will overwrite this value.
     */
    height?: number;
    /**
     * The chart-specific options. All options listen in the Google Charts documentation applying
     * to the chart type specified can be used here.
     */
    options: object;
    /**
     * Used to change the displayed value of the specified column in all rows.
     *
     * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)
     * and the index of the column you want the formatter to get applied to.
     */
    formatters?: Formatter[];
    /**
     * If this is set to `true`, the chart will be redrawn if the browser window is resized.
     * Defaults to `false` and should only be used when specifying the width or height of the chart
     * in percent.
     *
     * Note that this can impact performance.
     */
    dynamicResize: boolean;
    ready: EventEmitter<ChartReadyEvent<google.visualization.ChartBase>>;
    error: EventEmitter<ChartErrorEvent>;
    select: EventEmitter<ChartSelectionChangedEvent>;
    mouseover: EventEmitter<ChartMouseOverEvent>;
    mouseleave: EventEmitter<ChartMouseLeaveEvent>;
    private dataTable;
    private resizeSubscription;
    private wrapper;
    private wrapperReadySubject;
    private initialized;
    constructor(element: ElementRef, scriptLoaderService: ScriptLoaderService, dashboard?: DashboardComponent);
    readonly chart: google.visualization.ChartBase | null;
    readonly wrapperReady$: import("rxjs").Observable<google.visualization.ChartWrapper>;
    chartWrapper: google.visualization.ChartWrapper;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private createDataTable;
    private getDataAsTable;
    private updateResizeListener;
    private mergeOptions;
    private applyFormatters;
    private registerChartEvents;
    private drawChart;
}
