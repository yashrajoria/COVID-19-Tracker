import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { Subject } from 'rxjs';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { ChartEditorRef } from './chart-editor-ref';
var ChartEditorComponent = /** @class */ (function () {
    function ChartEditorComponent(scriptLoaderService) {
        this.scriptLoaderService = scriptLoaderService;
        this.initializedSubject = new Subject();
    }
    Object.defineProperty(ChartEditorComponent.prototype, "initialized$", {
        /**
         * Emits as soon as the chart editor is fully initialized.
         */
        get: function () {
            return this.initializedSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    ChartEditorComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.scriptLoaderService.loadChartPackages('charteditor').subscribe(function () {
            _this.editor = new google.visualization.ChartEditor();
            _this.initializedSubject.next(_this.editor);
            _this.initializedSubject.complete();
        });
    };
    ChartEditorComponent.prototype.editChart = function (component, options) {
        var handle = new ChartEditorRef(this.editor);
        this.editor.openDialog(component.chartWrapper, options || {});
        handle.afterClosed().subscribe(function (result) {
            if (result) {
                component.chartWrapper = result;
            }
        });
        return handle;
    };
    ChartEditorComponent.ctorParameters = function () { return [
        { type: ScriptLoaderService }
    ]; };
    ChartEditorComponent = __decorate([
        Component({
            selector: 'chart-editor',
            template: "<ng-content></ng-content>",
            host: { class: 'chart-editor' },
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [ScriptLoaderService])
    ], ChartEditorComponent);
    return ChartEditorComponent;
}());
export { ChartEditorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZ29vZ2xlLWNoYXJ0cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2NoYXJ0LWVkaXRvci9jaGFydC1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFHaEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBUXBEO0lBSUUsOEJBQW9CLG1CQUF3QztRQUF4Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBRnBELHVCQUFrQixHQUFHLElBQUksT0FBTyxFQUFvQyxDQUFDO0lBRWQsQ0FBQztJQUtoRSxzQkFBVyw4Q0FBWTtRQUh2Qjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEQsQ0FBQzs7O09BQUE7SUFFTSx1Q0FBUSxHQUFmO1FBQUEsaUJBTUM7UUFMQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ2xFLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JELEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFDLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFXTSx3Q0FBUyxHQUFoQixVQUFpQixTQUFvQixFQUFFLE9BQWlEO1FBQ3RGLElBQU0sTUFBTSxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU5RCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtZQUNuQyxJQUFJLE1BQU0sRUFBRTtnQkFDVixTQUFTLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQzthQUNqQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Z0JBckN3QyxtQkFBbUI7O0lBSmpELG9CQUFvQjtRQU5oQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsY0FBYztZQUN4QixRQUFRLEVBQUUsMkJBQTJCO1lBQ3JDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUU7WUFDL0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07U0FDaEQsQ0FBQzt5Q0FLeUMsbUJBQW1CO09BSmpELG9CQUFvQixDQTBDaEM7SUFBRCwyQkFBQztDQUFBLEFBMUNELElBMENDO1NBMUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBTY3JpcHRMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2NyaXB0LWxvYWRlci9zY3JpcHQtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2hhcnRCYXNlIH0gZnJvbSAnLi4vY2hhcnQtYmFzZS9jaGFydC1iYXNlLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IENoYXJ0RWRpdG9yUmVmIH0gZnJvbSAnLi9jaGFydC1lZGl0b3ItcmVmJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2hhcnQtZWRpdG9yJyxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgaG9zdDogeyBjbGFzczogJ2NoYXJ0LWVkaXRvcicgfSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2hhcnRFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIGVkaXRvcjogZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3I7XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8Z29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3I+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzY3JpcHRMb2FkZXJTZXJ2aWNlOiBTY3JpcHRMb2FkZXJTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBFbWl0cyBhcyBzb29uIGFzIHRoZSBjaGFydCBlZGl0b3IgaXMgZnVsbHkgaW5pdGlhbGl6ZWQuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGluaXRpYWxpemVkJCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplZFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zY3JpcHRMb2FkZXJTZXJ2aWNlLmxvYWRDaGFydFBhY2thZ2VzKCdjaGFydGVkaXRvcicpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICB0aGlzLmVkaXRvciA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvcigpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZFN1YmplY3QubmV4dCh0aGlzLmVkaXRvcik7XG4gICAgICB0aGlzLmluaXRpYWxpemVkU3ViamVjdC5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBjaGFydCBlZGl0b3IgYXMgYW4gZW1iZWRkZWQgZGlhbG9nIGJveCBvbiB0aGUgcGFnZS5cbiAgICogSWYgdGhlIGVkaXRvciBnZXRzIHNhdmVkLCB0aGUgY29tcG9uZW50cycgY2hhcnQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdC5cbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudCBUaGUgY2hhcnQgdG8gYmUgZWRpdGVkLlxuICAgKiBAcmV0dXJucyBBIHJlZmVyZW5jZSB0byB0aGUgb3BlbiBlZGl0b3IuXG4gICAqL1xuICBwdWJsaWMgZWRpdENoYXJ0KGNvbXBvbmVudDogQ2hhcnRCYXNlKTogQ2hhcnRFZGl0b3JSZWY7XG4gIHB1YmxpYyBlZGl0Q2hhcnQoY29tcG9uZW50OiBDaGFydEJhc2UsIG9wdGlvbnM6IGdvb2dsZS52aXN1YWxpemF0aW9uLkNoYXJ0RWRpdG9yT3B0aW9ucyk6IENoYXJ0RWRpdG9yUmVmO1xuICBwdWJsaWMgZWRpdENoYXJ0KGNvbXBvbmVudDogQ2hhcnRCYXNlLCBvcHRpb25zPzogZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3JPcHRpb25zKSB7XG4gICAgY29uc3QgaGFuZGxlID0gbmV3IENoYXJ0RWRpdG9yUmVmKHRoaXMuZWRpdG9yKTtcbiAgICB0aGlzLmVkaXRvci5vcGVuRGlhbG9nKGNvbXBvbmVudC5jaGFydFdyYXBwZXIsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgaGFuZGxlLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIGNvbXBvbmVudC5jaGFydFdyYXBwZXIgPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlO1xuICB9XG59XG4iXX0=