import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { generateRandomId } from '../../helpers/id.helper';
import { FilterType } from '../../models/control-type.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
var ControlWrapperComponent = /** @class */ (function () {
    function ControlWrapperComponent(loaderService) {
        this.loaderService = loaderService;
        /**
         * Emits when an error occurs when attempting to render the control.
         */
        this.error = new EventEmitter();
        /**
         * The control is ready to accept user interaction and for external method calls.
         *
         * Alternatively, you can listen for a ready event on the dashboard holding the control
         * and call control methods only after the event was fired.
         */
        this.ready = new EventEmitter();
        /**
         * Emits when the user interacts with the control, affecting its state.
         * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.
         *
         * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.
         */
        this.stateChange = new EventEmitter();
        /**
         * A generated id assigned to this components DOM element.
         */
        this.id = generateRandomId();
        this.wrapperReadySubject = new ReplaySubject(1);
        this.initialized = false;
    }
    Object.defineProperty(ControlWrapperComponent.prototype, "wrapperReady$", {
        /**
         * Emits after the `ControlWrapper` was created.
         */
        get: function () {
            return this.wrapperReadySubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlWrapperComponent.prototype, "controlWrapper", {
        get: function () {
            return this._controlWrapper;
        },
        enumerable: true,
        configurable: true
    });
    ControlWrapperComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.loaderService.loadChartPackages('controls').subscribe(function () {
            _this.createControlWrapper();
            _this.initialized = true;
        });
    };
    ControlWrapperComponent.prototype.ngOnChanges = function (changes) {
        if (!this.initialized) {
            return;
        }
        if (changes.type) {
            this._controlWrapper.setControlType(this.type);
        }
        if (changes.options) {
            this._controlWrapper.setOptions(this.options);
        }
        if (changes.state) {
            this._controlWrapper.setState(this.state);
        }
    };
    ControlWrapperComponent.prototype.createControlWrapper = function () {
        this._controlWrapper = new google.visualization.ControlWrapper({
            containerId: this.id,
            controlType: this.type,
            state: this.state,
            options: this.options
        });
        this.addEventListeners();
        this.wrapperReadySubject.next(this._controlWrapper);
    };
    ControlWrapperComponent.prototype.addEventListeners = function () {
        var _this = this;
        google.visualization.events.removeAllListeners(this._controlWrapper);
        google.visualization.events.addListener(this._controlWrapper, 'ready', function (event) { return _this.ready.emit(event); });
        google.visualization.events.addListener(this._controlWrapper, 'error', function (event) { return _this.error.emit(event); });
        google.visualization.events.addListener(this._controlWrapper, 'statechange', function (event) { return _this.stateChange.emit(event); });
    };
    ControlWrapperComponent.ctorParameters = function () { return [
        { type: ScriptLoaderService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ControlWrapperComponent.prototype, "for", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ControlWrapperComponent.prototype, "type", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ControlWrapperComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ControlWrapperComponent.prototype, "state", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], ControlWrapperComponent.prototype, "error", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], ControlWrapperComponent.prototype, "ready", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], ControlWrapperComponent.prototype, "stateChange", void 0);
    __decorate([
        HostBinding('id'),
        __metadata("design:type", Object)
    ], ControlWrapperComponent.prototype, "id", void 0);
    ControlWrapperComponent = __decorate([
        Component({
            selector: 'control-wrapper',
            template: '',
            host: { class: 'control-wrapper' },
            exportAs: 'controlWrapper',
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [ScriptLoaderService])
    ], ControlWrapperComponent);
    return ControlWrapperComponent;
}());
export { ControlWrapperComponent };
//# sourceMappingURL=data:application/json;base64,