import { __assign, __decorate, __metadata, __rest } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
var ChartWrapperComponent = /** @class */ (function () {
    function ChartWrapperComponent(element, scriptLoaderService) {
        this.element = element;
        this.scriptLoaderService = scriptLoaderService;
        this.error = new EventEmitter();
        this.ready = new EventEmitter();
        this.select = new EventEmitter();
        this.wrapperReadySubject = new ReplaySubject(1);
        this.initialized = false;
    }
    Object.defineProperty(ChartWrapperComponent.prototype, "chart", {
        get: function () {
            if (!this.wrapper) {
                return null;
            }
            return this.wrapper.getChart();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartWrapperComponent.prototype, "wrapperReady$", {
        get: function () {
            return this.wrapperReadySubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartWrapperComponent.prototype, "chartWrapper", {
        get: function () {
            return this.wrapper;
        },
        set: function (wrapper) {
            this.wrapper = wrapper;
            this.drawChart();
        },
        enumerable: true,
        configurable: true
    });
    ChartWrapperComponent.prototype.ngOnInit = function () {
        var _this = this;
        // We don't need to load any chart packages, the chart wrapper will handle this else for us
        this.scriptLoaderService.loadChartPackages().subscribe(function () {
            if (!_this.specs) {
                _this.specs = {};
            }
            var _a = _this.specs, containerId = _a.containerId, container = _a.container, specs = __rest(_a, ["containerId", "container"]);
            // Only ever create the wrapper once to allow animations to happen if something changes.
            _this.wrapper = new google.visualization.ChartWrapper(__assign(__assign({}, specs), { container: _this.element.nativeElement }));
            _this.registerChartEvents();
            _this.wrapperReadySubject.next(_this.wrapper);
            _this.drawChart();
            _this.initialized = true;
        });
    };
    ChartWrapperComponent.prototype.ngOnChanges = function (changes) {
        if (!this.initialized) {
            return;
        }
        if (changes.specs) {
            this.updateChart();
            this.drawChart();
        }
    };
    ChartWrapperComponent.prototype.updateChart = function () {
        if (!this.specs) {
            // When creating the wrapper with empty specs, the google charts library will show an error
            // If we don't do this, a javascript error will be thrown, which is not as visible to the user
            this.specs = {};
        }
        this.wrapper.setChartType(this.specs.chartType);
        this.wrapper.setDataTable(this.specs.dataTable); // The typing here are not correct, this also accepts plain arrays
        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);
        this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);
        this.wrapper.setQuery(this.specs.query);
        this.wrapper.setOptions(this.specs.options);
        this.wrapper.setRefreshInterval(this.specs.refreshInterval);
        this.wrapper.setView(this.specs.view);
    };
    ChartWrapperComponent.prototype.drawChart = function () {
        this.wrapper.draw();
    };
    ChartWrapperComponent.prototype.registerChartEvents = function () {
        var _this = this;
        google.visualization.events.removeAllListeners(this.wrapper);
        var registerChartEvent = function (object, eventName, callback) {
            google.visualization.events.addListener(object, eventName, callback);
        };
        registerChartEvent(this.wrapper, 'ready', function () { return _this.ready.emit({ chart: _this.chart }); });
        registerChartEvent(this.wrapper, 'error', function (error) { return _this.error.emit(error); });
        registerChartEvent(this.wrapper, 'select', function () {
            var selection = _this.chart.getSelection();
            _this.select.emit({ selection: selection });
        });
    };
    ChartWrapperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScriptLoaderService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], ChartWrapperComponent.prototype, "specs", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], ChartWrapperComponent.prototype, "error", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], ChartWrapperComponent.prototype, "ready", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], ChartWrapperComponent.prototype, "select", void 0);
    ChartWrapperComponent = __decorate([
        Component({
            selector: 'chart-wrapper',
            template: '',
            host: { class: 'chart-wrapper' },
            exportAs: 'chartWrapper',
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [':host { width: fit-content; display: block; }']
        }),
        __metadata("design:paramtypes", [ElementRef, ScriptLoaderService])
    ], ChartWrapperComponent);
    return ChartWrapperComponent;
}());
export { ChartWrapperComponent };
//# sourceMappingURL=data:application/json;base64,