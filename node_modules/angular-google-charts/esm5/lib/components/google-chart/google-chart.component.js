import { __assign, __decorate, __metadata, __param, __read, __spread, __values } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Optional, Output, SimpleChanges } from '@angular/core';
import { fromEvent, ReplaySubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { ChartType } from '../../models/chart-type.model';
import { ScriptLoaderService } from '../../script-loader/script-loader.service';
import { DashboardComponent } from '../dashboard/dashboard.component';
var GoogleChartComponent = /** @class */ (function () {
    function GoogleChartComponent(element, scriptLoaderService, dashboard) {
        this.element = element;
        this.scriptLoaderService = scriptLoaderService;
        this.dashboard = dashboard;
        /**
         * The chart-specific options. All options listen in the Google Charts documentation applying
         * to the chart type specified can be used here.
         */
        this.options = {};
        /**
         * If this is set to `true`, the chart will be redrawn if the browser window is resized.
         * Defaults to `false` and should only be used when specifying the width or height of the chart
         * in percent.
         *
         * Note that this can impact performance.
         */
        this.dynamicResize = false;
        this.ready = new EventEmitter();
        this.error = new EventEmitter();
        this.select = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.wrapperReadySubject = new ReplaySubject(1);
        this.initialized = false;
    }
    Object.defineProperty(GoogleChartComponent.prototype, "chart", {
        get: function () {
            if (!this.wrapper) {
                return null;
            }
            return this.wrapper.getChart();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleChartComponent.prototype, "wrapperReady$", {
        get: function () {
            return this.wrapperReadySubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleChartComponent.prototype, "chartWrapper", {
        get: function () {
            return this.wrapper;
        },
        set: function (wrapper) {
            this.wrapper = wrapper;
            this.drawChart();
        },
        enumerable: true,
        configurable: true
    });
    GoogleChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        // We don't need to load any chart packages, the chart wrapper will handle this for us
        this.scriptLoaderService.loadChartPackages().subscribe(function () {
            _this.createDataTable();
            // Only ever create the wrapper once to allow animations to happen when someting changes.
            _this.wrapper = new google.visualization.ChartWrapper({
                container: _this.element.nativeElement,
                chartType: _this.type,
                dataTable: _this.dataTable,
                options: _this.mergeOptions()
            });
            _this.registerChartEvents();
            _this.wrapperReadySubject.next(_this.wrapper);
            _this.initialized = true;
            _this.drawChart();
        });
    };
    GoogleChartComponent.prototype.ngOnChanges = function (changes) {
        if (changes.dynamicResize) {
            this.updateResizeListener();
        }
        if (this.initialized) {
            var shouldRedraw = false;
            if (changes.data || changes.columns || changes.formatters) {
                this.createDataTable();
                this.wrapper.setDataTable(this.dataTable);
                shouldRedraw = true;
            }
            if (changes.type) {
                this.wrapper.setChartType(this.type);
                shouldRedraw = true;
            }
            if (changes.options || changes.width || changes.height || changes.title) {
                this.wrapper.setOptions(this.mergeOptions());
                shouldRedraw = true;
            }
            if (shouldRedraw) {
                this.drawChart();
            }
        }
    };
    GoogleChartComponent.prototype.createDataTable = function () {
        if (this.data == null) {
            return;
        }
        var firstRowIsData = true;
        if (this.columns != null) {
            firstRowIsData = false;
        }
        this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);
        this.applyFormatters(this.dataTable);
    };
    GoogleChartComponent.prototype.getDataAsTable = function () {
        if (this.columns) {
            return __spread([this.columns], this.data);
        }
        else {
            return this.data;
        }
    };
    GoogleChartComponent.prototype.updateResizeListener = function () {
        var _this = this;
        if (this.resizeSubscription != null) {
            this.resizeSubscription.unsubscribe();
            this.resizeSubscription = null;
        }
        if (this.dynamicResize) {
            this.resizeSubscription = fromEvent(window, 'resize')
                .pipe(debounceTime(100))
                .subscribe(function () {
                if (_this.initialized) {
                    _this.drawChart();
                }
            });
        }
    };
    GoogleChartComponent.prototype.mergeOptions = function () {
        return __assign({ title: this.title, width: this.width, height: this.height }, this.options);
    };
    GoogleChartComponent.prototype.applyFormatters = function (dataTable) {
        var e_1, _a;
        if (this.formatters == null) {
            return;
        }
        try {
            for (var _b = __values(this.formatters), _c = _b.next(); !_c.done; _c = _b.next()) {
                var val = _c.value;
                val.formatter.format(dataTable, val.colIndex);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    GoogleChartComponent.prototype.registerChartEvents = function () {
        var _this = this;
        google.visualization.events.removeAllListeners(this.wrapper);
        var registerChartEvent = function (object, eventName, callback) {
            google.visualization.events.addListener(object, eventName, callback);
        };
        registerChartEvent(this.wrapper, 'ready', function () {
            // This could also be done by checking if we already subscribed to the events
            google.visualization.events.removeAllListeners(_this.chart);
            registerChartEvent(_this.chart, 'onmouseover', function (event) { return _this.mouseover.emit(event); });
            registerChartEvent(_this.chart, 'onmouseout', function (event) { return _this.mouseleave.emit(event); });
            registerChartEvent(_this.chart, 'select', function () {
                var selection = _this.chart.getSelection();
                _this.select.emit({ selection: selection });
            });
            _this.ready.emit({ chart: _this.chart });
        });
        registerChartEvent(this.wrapper, 'error', function (error) { return _this.error.emit(error); });
    };
    GoogleChartComponent.prototype.drawChart = function () {
        if (this.dashboard != null) {
            // If this chart is part of a dashboard, the dashboard takes care of drawing
            return;
        }
        this.wrapper.draw();
    };
    GoogleChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScriptLoaderService },
        { type: DashboardComponent, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], GoogleChartComponent.prototype, "type", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], GoogleChartComponent.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], GoogleChartComponent.prototype, "columns", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], GoogleChartComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], GoogleChartComponent.prototype, "width", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], GoogleChartComponent.prototype, "height", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], GoogleChartComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], GoogleChartComponent.prototype, "formatters", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], GoogleChartComponent.prototype, "dynamicResize", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], GoogleChartComponent.prototype, "ready", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], GoogleChartComponent.prototype, "error", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], GoogleChartComponent.prototype, "select", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], GoogleChartComponent.prototype, "mouseover", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], GoogleChartComponent.prototype, "mouseleave", void 0);
    GoogleChartComponent = __decorate([
        Component({
            selector: 'google-chart',
            template: '',
            host: { class: 'google-chart' },
            exportAs: 'googleChart',
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [':host { width: fit-content; display: block; }']
        }),
        __param(2, Optional()),
        __metadata("design:paramtypes", [ElementRef,
            ScriptLoaderService,
            DashboardComponent])
    ], GoogleChartComponent);
    return GoogleChartComponent;
}());
export { GoogleChartComponent };
//# sourceMappingURL=data:application/json;base64,