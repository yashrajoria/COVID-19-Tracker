import { __assign, __decorate, __metadata, __param } from "tslib";
import { Inject, Injectable, LOCALE_ID, NgZone, Optional } from '@angular/core';
import { Observable, of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { GOOGLE_CHARTS_CONFIG } from '../models/injection-tokens.model';
import * as i0 from "@angular/core";
import * as i1 from "../models/injection-tokens.model";
var DEFAULT_CONFIG = {
    mapsApiKey: '',
    version: 'current',
    safeMode: false
};
var ScriptLoaderService = /** @class */ (function () {
    function ScriptLoaderService(zone, localeId, config) {
        this.zone = zone;
        this.localeId = localeId;
        this.config = config;
        this.scriptSource = 'https://www.gstatic.com/charts/loader.js';
        this.scriptLoadSubject = new Subject();
        this.config = __assign(__assign({}, DEFAULT_CONFIG), (config || {}));
    }
    /**
     * Checks whether `google.charts` is available.
     *
     * If not, it can be loaded by calling `loadChartPackages`.
     *
     * @returns `true` if `google.charts` is available, `false` otherwise.
     */
    ScriptLoaderService.prototype.isGoogleChartsAvailable = function () {
        if (typeof google === 'undefined' || typeof google.charts === 'undefined') {
            return false;
        }
        return true;
    };
    /**
     * Loads the Google Chart script and the provided chart packages.
     * Can be called multiple times to load more packages.
     *
     * When called without any arguments, this will just load the default package
     * containing the namespaces `google.charts` and `google.visualization` without any charts.
     *
     * @param packages The packages to load.
     * @returns A stream emitting as soon as the chart packages are loaded.
     */
    ScriptLoaderService.prototype.loadChartPackages = function () {
        var _this = this;
        var packages = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            packages[_i] = arguments[_i];
        }
        return this.loadGoogleCharts().pipe(switchMap(function () {
            return new Observable(function (observer) {
                var config = {
                    packages: packages,
                    language: _this.localeId,
                    mapsApiKey: _this.config.mapsApiKey,
                    safeMode: _this.config.safeMode
                };
                google.charts.load(_this.config.version, config);
                google.charts.setOnLoadCallback(function () {
                    _this.zone.run(function () {
                        observer.next();
                        observer.complete();
                    });
                });
            });
        }));
    };
    /**
     * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.
     *
     * @returns A stream emitting as soon as loading has completed.
     * If the google charts script is already loaded, the stream emits immediately.
     */
    ScriptLoaderService.prototype.loadGoogleCharts = function () {
        var _this = this;
        if (this.isGoogleChartsAvailable()) {
            return of(null);
        }
        else if (!this.isLoadingGoogleCharts()) {
            var script = this.createGoogleChartsScript();
            script.onload = function () {
                _this.zone.run(function () {
                    _this.scriptLoadSubject.next();
                    _this.scriptLoadSubject.complete();
                });
            };
            script.onerror = function () {
                _this.zone.run(function () {
                    console.error('Failed to load the google charts script!');
                    _this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));
                });
            };
        }
        return this.scriptLoadSubject.asObservable();
    };
    ScriptLoaderService.prototype.isLoadingGoogleCharts = function () {
        return this.getGoogleChartsScript() != null;
    };
    ScriptLoaderService.prototype.getGoogleChartsScript = function () {
        var _this = this;
        var pageScripts = Array.from(document.getElementsByTagName('script'));
        return pageScripts.find(function (script) { return script.src === _this.scriptSource; });
    };
    ScriptLoaderService.prototype.createGoogleChartsScript = function () {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = this.scriptSource;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
        return script;
    };
    ScriptLoaderService.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_CHARTS_CONFIG,] }, { type: Optional }] }
    ]; };
    ScriptLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ScriptLoaderService_Factory() { return new ScriptLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.LOCALE_ID), i0.ɵɵinject(i1.GOOGLE_CHARTS_CONFIG, 8)); }, token: ScriptLoaderService, providedIn: "root" });
    ScriptLoaderService = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(1, Inject(LOCALE_ID)),
        __param(2, Inject(GOOGLE_CHARTS_CONFIG)), __param(2, Optional()),
        __metadata("design:paramtypes", [NgZone, String, Object])
    ], ScriptLoaderService);
    return ScriptLoaderService;
}());
export { ScriptLoaderService };
//# sourceMappingURL=data:application/json;base64,