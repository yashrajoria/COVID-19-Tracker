{"version":3,"file":"angular-google-charts.js","sources":["ng://angular-google-charts/lib/components/chart-editor/chart-editor-ref.ts","ng://angular-google-charts/lib/models/injection-tokens.model.ts","ng://angular-google-charts/lib/script-loader/script-loader.service.ts","ng://angular-google-charts/lib/components/chart-editor/chart-editor.component.ts","ng://angular-google-charts/lib/models/chart-type.model.ts","ng://angular-google-charts/lib/helpers/id.helper.ts","ng://angular-google-charts/lib/models/control-type.model.ts","ng://angular-google-charts/lib/components/control-wrapper/control-wrapper.component.ts","ng://angular-google-charts/lib/components/dashboard/dashboard.component.ts","ng://angular-google-charts/lib/components/google-chart/google-chart.component.ts","ng://angular-google-charts/lib/components/chart-wrapper/chart-wrapper.component.ts","ng://angular-google-charts/lib/helpers/chart.helper.ts","ng://angular-google-charts/lib/google-charts.module.ts","ng://angular-google-charts/index.ts","ng://angular-google-charts/angular-google-charts.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\n\nexport type EditChartResult = google.visualization.ChartWrapper | null;\n\nexport class ChartEditorRef {\n  private readonly doneSubject = new Subject<EditChartResult>();\n\n  constructor(private readonly editor: google.visualization.ChartEditor) {\n    this.addEventListeners();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is saved.\n   * Emits either the result if the dialog was saved or `null` if editing was cancelled.\n   */\n  public afterClosed(): Observable<EditChartResult> {\n    return this.doneSubject.asObservable();\n  }\n\n  /**\n   * Stops editing the chart and closes the dialog.\n   */\n  public cancel() {\n    this.editor.closeDialog();\n  }\n\n  private addEventListeners() {\n    google.visualization.events.addOneTimeListener(this.editor, 'ok', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      const updatedChartWrapper = this.editor.getChartWrapper();\n\n      this.doneSubject.next(updatedChartWrapper);\n      this.doneSubject.complete();\n    });\n\n    google.visualization.events.addOneTimeListener(this.editor, 'cancel', () => {\n      google.visualization.events.removeAllListeners(this.editor);\n\n      this.doneSubject.next(null);\n      this.doneSubject.complete();\n    });\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { GoogleChartsConfig } from './google-charts-config.model';\n\nexport const GOOGLE_CHARTS_CONFIG = new InjectionToken<GoogleChartsConfig>('GOOGLE_CHARTS_CONFIG');\n","import { Inject, Injectable, LOCALE_ID, NgZone, Optional } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { GoogleChartsConfig } from '../models/google-charts-config.model';\nimport { GOOGLE_CHARTS_CONFIG } from '../models/injection-tokens.model';\n\nconst DEFAULT_CONFIG: GoogleChartsConfig = {\n  mapsApiKey: '',\n  version: 'current',\n  safeMode: false\n};\n\n@Injectable({ providedIn: 'root' })\nexport class ScriptLoaderService {\n  private readonly scriptSource = 'https://www.gstatic.com/charts/loader.js';\n  private readonly scriptLoadSubject = new Subject<void>();\n\n  constructor(\n    private zone: NgZone,\n    @Inject(LOCALE_ID) private localeId: string,\n    @Inject(GOOGLE_CHARTS_CONFIG) @Optional() private config?: GoogleChartsConfig\n  ) {\n    this.config = { ...DEFAULT_CONFIG, ...(config || {}) };\n  }\n\n  /**\n   * Checks whether `google.charts` is available.\n   *\n   * If not, it can be loaded by calling `loadChartPackages`.\n   *\n   * @returns `true` if `google.charts` is available, `false` otherwise.\n   */\n  public isGoogleChartsAvailable(): boolean {\n    if (typeof google === 'undefined' || typeof google.charts === 'undefined') {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Loads the Google Chart script and the provided chart packages.\n   * Can be called multiple times to load more packages.\n   *\n   * When called without any arguments, this will just load the default package\n   * containing the namespaces `google.charts` and `google.visualization` without any charts.\n   *\n   * @param packages The packages to load.\n   * @returns A stream emitting as soon as the chart packages are loaded.\n   */\n  public loadChartPackages(...packages: string[]): Observable<void> {\n    return this.loadGoogleCharts().pipe(\n      switchMap(() => {\n        return new Observable<void>(observer => {\n          const config = {\n            packages,\n            language: this.localeId,\n            mapsApiKey: this.config.mapsApiKey,\n            safeMode: this.config.safeMode\n          };\n\n          google.charts.load(this.config.version, config);\n          google.charts.setOnLoadCallback(() => {\n            this.zone.run(() => {\n              observer.next();\n              observer.complete();\n            });\n          });\n        });\n      })\n    );\n  }\n\n  /**\n   * Loads the Google Charts script. After the script is loaded, `google.charts` is defined.\n   *\n   * @returns A stream emitting as soon as loading has completed.\n   * If the google charts script is already loaded, the stream emits immediately.\n   */\n  private loadGoogleCharts() {\n    if (this.isGoogleChartsAvailable()) {\n      return of(null);\n    } else if (!this.isLoadingGoogleCharts()) {\n      const script = this.createGoogleChartsScript();\n      script.onload = () => {\n        this.zone.run(() => {\n          this.scriptLoadSubject.next();\n          this.scriptLoadSubject.complete();\n        });\n      };\n\n      script.onerror = () => {\n        this.zone.run(() => {\n          console.error('Failed to load the google charts script!');\n          this.scriptLoadSubject.error(new Error('Failed to load the google charts script!'));\n        });\n      };\n    }\n\n    return this.scriptLoadSubject.asObservable();\n  }\n\n  private isLoadingGoogleCharts() {\n    return this.getGoogleChartsScript() != null;\n  }\n\n  private getGoogleChartsScript(): HTMLScriptElement | null {\n    const pageScripts = Array.from(document.getElementsByTagName('script'));\n    return pageScripts.find(script => script.src === this.scriptSource);\n  }\n\n  private createGoogleChartsScript(): HTMLScriptElement {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = this.scriptSource;\n    script.async = true;\n    document.getElementsByTagName('head')[0].appendChild(script);\n    return script;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\nimport { ChartEditorRef } from './chart-editor-ref';\n\n@Component({\n  selector: 'chart-editor',\n  template: `<ng-content></ng-content>`,\n  host: { class: 'chart-editor' },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartEditorComponent implements OnInit {\n  private editor: google.visualization.ChartEditor;\n  private initializedSubject = new Subject<google.visualization.ChartEditor>();\n\n  constructor(private scriptLoaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits as soon as the chart editor is fully initialized.\n   */\n  public get initialized$() {\n    return this.initializedSubject.asObservable();\n  }\n\n  public ngOnInit() {\n    this.scriptLoaderService.loadChartPackages('charteditor').subscribe(() => {\n      this.editor = new google.visualization.ChartEditor();\n      this.initializedSubject.next(this.editor);\n      this.initializedSubject.complete();\n    });\n  }\n\n  /**\n   * Opens the chart editor as an embedded dialog box on the page.\n   * If the editor gets saved, the components' chart will be updated with the result.\n   *\n   * @param component The chart to be edited.\n   * @returns A reference to the open editor.\n   */\n  public editChart(component: ChartBase): ChartEditorRef;\n  public editChart(component: ChartBase, options: google.visualization.ChartEditorOptions): ChartEditorRef;\n  public editChart(component: ChartBase, options?: google.visualization.ChartEditorOptions) {\n    const handle = new ChartEditorRef(this.editor);\n    this.editor.openDialog(component.chartWrapper, options || {});\n\n    handle.afterClosed().subscribe(result => {\n      if (result) {\n        component.chartWrapper = result;\n      }\n    });\n\n    return handle;\n  }\n}\n","export enum ChartType {\n  AnnotationChart = 'AnnotationChart',\n  AreaChart = 'AreaChart',\n  Bar = 'Bar',\n  BarChart = 'BarChart',\n  BubbleChart = 'BubbleChart',\n  Calendar = 'Calendar',\n  CandlestickChart = 'CandlestickChart',\n  ColumnChart = 'ColumnChart',\n  ComboChart = 'ComboChart',\n  PieChart = 'PieChart',\n  Gantt = 'Gantt',\n  Gauge = 'Gauge',\n  GeoChart = 'GeoChart',\n  Histogram = 'Histogram',\n  Line = 'Line',\n  LineChart = 'LineChart',\n  Map = 'Map',\n  OrgChart = 'OrgChart',\n  Sankey = 'Sankey',\n  Scatter = 'Scatter',\n  ScatterChart = 'ScatterChart',\n  SteppedAreaChart = 'SteppedAreaChart',\n  Table = 'Table',\n  Timeline = 'Timeline',\n  TreeMap = 'TreeMap',\n  WordTree = 'wordtree'\n}\n","/**\n * Generates a random ID which can be used to uniquely identify an element.\n */\nexport function generateRandomId() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n","export enum FilterType {\n  Category = 'CategoryFilter',\n  ChartRange = 'ChartRangeFilter',\n  DateRange = 'DateRangeFilter',\n  NumberRange = 'NumberRangeFilter',\n  String = 'StringFilter'\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { generateRandomId } from '../../helpers/id.helper';\nimport { FilterType } from '../../models/control-type.model';\nimport { ChartErrorEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'control-wrapper',\n  template: '',\n  host: { class: 'control-wrapper' },\n  exportAs: 'controlWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ControlWrapperComponent implements OnInit, OnChanges {\n  /**\n   * Charts controlled by this control wrapper. Can be a single chart or an array of charts.\n   */\n  @Input()\n  public for!: ChartBase | ChartBase[];\n\n  /**\n   * The class name of the control.\n   * The `google.visualization` package name can be omitted for Google controls.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper type=\"CategoryFilter\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public type!: FilterType;\n\n  /**\n   * An object describing the options for the control.\n   * You can use either JavaScript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   * ```html\n   * <control-wrapper [options]=\"{'filterColumnLabel': 'Age', 'minValue': 10, 'maxValue': 80}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public options?: object;\n\n  /**\n   * An object describing the state of the control.\n   * The state collects all the variables that the user operating the control can affect.\n   *\n   * For example, a range slider state can be described in term of the positions that the low and high thumb\n   * of the slider occupy.\n   * You can use either Javascript literal notation, or provide a handle to the object.\n   *\n   * @example\n   *\n   *  ```html\n   * <control-wrapper [state]=\"{'lowValue': 20, 'highValue': 50}\"></control-wrapper>\n   * ```\n   */\n  @Input()\n  public state?: object;\n\n  /**\n   * Emits when an error occurs when attempting to render the control.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  /**\n   * The control is ready to accept user interaction and for external method calls.\n   *\n   * Alternatively, you can listen for a ready event on the dashboard holding the control\n   * and call control methods only after the event was fired.\n   */\n  @Output()\n  public ready = new EventEmitter<void>();\n\n  /**\n   * Emits when the user interacts with the control, affecting its state.\n   * For example, a `stateChange` event will be emitted whenever you move the thumbs of a range slider control.\n   *\n   * To retrieve an updated control state after the event fired, call `ControlWrapper.getState()`.\n   */\n  @Output()\n  public stateChange = new EventEmitter<void>();\n\n  /**\n   * A generated id assigned to this components DOM element.\n   */\n  @HostBinding('id')\n  public readonly id = generateRandomId();\n\n  private _controlWrapper: google.visualization.ControlWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ControlWrapper>(1);\n  private initialized = false;\n\n  constructor(private loaderService: ScriptLoaderService) {}\n\n  /**\n   * Emits after the `ControlWrapper` was created.\n   */\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get controlWrapper(): google.visualization.ControlWrapper | null {\n    return this._controlWrapper;\n  }\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createControlWrapper();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.type) {\n      this._controlWrapper.setControlType(this.type);\n    }\n\n    if (changes.options) {\n      this._controlWrapper.setOptions(this.options);\n    }\n\n    if (changes.state) {\n      this._controlWrapper.setState(this.state);\n    }\n  }\n\n  private createControlWrapper() {\n    this._controlWrapper = new google.visualization.ControlWrapper({\n      containerId: this.id,\n      controlType: this.type,\n      state: this.state,\n      options: this.options\n    });\n\n    this.addEventListeners();\n    this.wrapperReadySubject.next(this._controlWrapper);\n  }\n\n  private addEventListeners() {\n    google.visualization.events.removeAllListeners(this._controlWrapper);\n\n    google.visualization.events.addListener(this._controlWrapper, 'ready', event => this.ready.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'error', event => this.error.emit(event));\n    google.visualization.events.addListener(this._controlWrapper, 'statechange', event => this.stateChange.emit(event));\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges\n} from '@angular/core';\nimport { combineLatest } from 'rxjs';\n\nimport { ChartErrorEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { Column, Row } from '../chart-base/chart-base.component';\nimport { ControlWrapperComponent } from '../control-wrapper/control-wrapper.component';\n\n@Component({\n  selector: 'dashboard',\n  template: '<ng-content></ng-content>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'dashboard',\n  host: { class: 'dashboard' }\n})\nexport class DashboardComponent implements OnInit, OnChanges {\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns: Column[];\n\n  /**\n   * The dashboard has completed drawing and is ready to accept changes.\n   *\n   * The ready event will also fire:\n   * - after the completion of a dashboard refresh triggered by a user or programmatic interaction with one of the controls,\n   * - after redrawing any chart on the dashboard.\n   */\n  @Output()\n  public ready = new EventEmitter<void>();\n\n  /**\n   * Emits when an error occurs when attempting to render the dashboard.\n   * One or more of the controls and charts that are part of the dashboard may have failed rendering.\n   */\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @ContentChildren(ControlWrapperComponent)\n  private controlWrappers: QueryList<ControlWrapperComponent>;\n\n  private dashboard: google.visualization.Dashboard;\n  private dataTable: google.visualization.DataTable;\n  private initialized = false;\n\n  constructor(private element: ElementRef, private loaderService: ScriptLoaderService) {}\n\n  public ngOnInit() {\n    this.loaderService.loadChartPackages('controls').subscribe(() => {\n      this.createDataTable();\n      this.createDashboard();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.data || changes.columns) {\n      this.createDataTable();\n      this.dashboard.draw(this.dataTable);\n    }\n  }\n\n  private createDashboard() {\n    // TODO: This should happen in the control wrapper\n    // However, I don't yet know how to do this because then `bind()` would get called multiple times\n    // for the same control if something changes. This is not supported by google charts as far as I can tell\n    // from their source code.\n    const controlWrappersReady$ = this.controlWrappers.map(control => control.wrapperReady$);\n    const chartsReady$ = this.controlWrappers\n      .map(control => control.for)\n      .map(charts => {\n        if (Array.isArray(charts)) {\n          // CombineLatest waits for all observables\n          return combineLatest(charts.map(chart => chart.wrapperReady$));\n        } else {\n          return charts.wrapperReady$;\n        }\n      });\n\n    // We have to wait for all chart wrappers and control wrappers to be initialized\n    // before we can compose them together to create the dashboard\n    combineLatest([...controlWrappersReady$, ...chartsReady$]).subscribe(() => {\n      this.dashboard = new google.visualization.Dashboard(this.element.nativeElement);\n      this.initializeBindings();\n      this.dashboard.draw(this.dataTable);\n    });\n  }\n\n  private initializeBindings() {\n    this.controlWrappers.forEach(control => {\n      if (Array.isArray(control.for)) {\n        const chartWrappers = control.for.map(chart => chart.chartWrapper);\n        this.dashboard.bind(control.controlWrapper, chartWrappers);\n      } else {\n        this.dashboard.bind(control.controlWrapper, control.for.chartWrapper);\n      }\n    });\n  }\n\n  private createDataTable() {\n    if (this.data == null) {\n      return;\n    }\n\n    let firstRowIsData = true;\n    if (this.columns != null) {\n      firstRowIsData = false;\n    }\n\n    this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);\n  }\n\n  private getDataAsTable(): (Row | Column[])[] {\n    if (this.columns) {\n      return [this.columns, ...this.data];\n    } else {\n      return this.data;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { fromEvent, ReplaySubject, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { ChartType } from '../../models/chart-type.model';\nimport {\n  ChartErrorEvent,\n  ChartMouseLeaveEvent,\n  ChartMouseOverEvent,\n  ChartReadyEvent,\n  ChartSelectionChangedEvent\n} from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase, Column, Row } from '../chart-base/chart-base.component';\nimport { DashboardComponent } from '../dashboard/dashboard.component';\n\nexport interface Formatter {\n  formatter: google.visualization.DefaultFormatter;\n  colIndex: number;\n}\n\n@Component({\n  selector: 'google-chart',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'google-chart' },\n  exportAs: 'googleChart',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GoogleChartComponent implements ChartBase, OnChanges, OnInit {\n  /**\n   * The type of the chart to create.\n   */\n  @Input()\n  public type!: ChartType;\n\n  /**\n   * Data used to initialize the table.\n   *\n   * This must also contain all roles that are set in the `columns` property.\n   */\n  @Input()\n  public data!: Row[];\n\n  /**\n   * The columns the `data` consists of.\n   * The length of this array must match the length of each row in the `data` object.\n   *\n   * If {@link https://developers.google.com/chart/interactive/docs/roles roles} should be applied, they must be included in this array as well.\n   */\n  @Input()\n  public columns: Column[];\n\n  /**\n   * A convenience property used to set the title of the chart.\n   *\n   * This can also be set using `options.title`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public title?: string;\n\n  /**\n   * A convenience property used to set the width of the chart in pixels.\n   *\n   * This can also be set using `options.width`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public width?: number;\n\n  /**\n   * A convenience property used to set the height of the chart in pixels.\n   *\n   * This can also be set using `options.height`, which, if existant, will overwrite this value.\n   */\n  @Input()\n  public height?: number;\n\n  /**\n   * The chart-specific options. All options listen in the Google Charts documentation applying\n   * to the chart type specified can be used here.\n   */\n  @Input()\n  public options: object = {};\n\n  /**\n   * Used to change the displayed value of the specified column in all rows.\n   *\n   * Each array element must consist of an instance of a [`formatter`](https://developers.google.com/chart/interactive/docs/reference#formatters)\n   * and the index of the column you want the formatter to get applied to.\n   */\n  @Input()\n  public formatters?: Formatter[];\n\n  /**\n   * If this is set to `true`, the chart will be redrawn if the browser window is resized.\n   * Defaults to `false` and should only be used when specifying the width or height of the chart\n   * in percent.\n   *\n   * Note that this can impact performance.\n   */\n  @Input()\n  public dynamicResize = false;\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  @Output()\n  public mouseover = new EventEmitter<ChartMouseOverEvent>();\n\n  @Output()\n  public mouseleave = new EventEmitter<ChartMouseLeaveEvent>();\n\n  private dataTable: google.visualization.DataTable;\n  private resizeSubscription: Subscription;\n\n  private wrapper: google.visualization.ChartWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n\n  constructor(\n    private element: ElementRef,\n    private scriptLoaderService: ScriptLoaderService,\n    @Optional() private dashboard?: DashboardComponent\n  ) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    if (!this.wrapper) {\n      return null;\n    }\n\n    return this.wrapper.getChart();\n  }\n\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper {\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      this.createDataTable();\n\n      // Only ever create the wrapper once to allow animations to happen when someting changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        container: this.element.nativeElement,\n        chartType: this.type,\n        dataTable: this.dataTable,\n        options: this.mergeOptions()\n      });\n\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n      this.initialized = true;\n\n      this.drawChart();\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.dynamicResize) {\n      this.updateResizeListener();\n    }\n\n    if (this.initialized) {\n      let shouldRedraw = false;\n      if (changes.data || changes.columns || changes.formatters) {\n        this.createDataTable();\n        this.wrapper.setDataTable(this.dataTable);\n        shouldRedraw = true;\n      }\n\n      if (changes.type) {\n        this.wrapper.setChartType(this.type);\n        shouldRedraw = true;\n      }\n\n      if (changes.options || changes.width || changes.height || changes.title) {\n        this.wrapper.setOptions(this.mergeOptions());\n        shouldRedraw = true;\n      }\n\n      if (shouldRedraw) {\n        this.drawChart();\n      }\n    }\n  }\n\n  private createDataTable() {\n    if (this.data == null) {\n      return;\n    }\n\n    let firstRowIsData = true;\n    if (this.columns != null) {\n      firstRowIsData = false;\n    }\n\n    this.dataTable = google.visualization.arrayToDataTable(this.getDataAsTable(), firstRowIsData);\n    this.applyFormatters(this.dataTable);\n  }\n\n  private getDataAsTable(): (Row | Column[])[] {\n    if (this.columns) {\n      return [this.columns, ...this.data];\n    } else {\n      return this.data;\n    }\n  }\n\n  private updateResizeListener() {\n    if (this.resizeSubscription != null) {\n      this.resizeSubscription.unsubscribe();\n      this.resizeSubscription = null;\n    }\n\n    if (this.dynamicResize) {\n      this.resizeSubscription = fromEvent(window, 'resize')\n        .pipe(debounceTime(100))\n        .subscribe(() => {\n          if (this.initialized) {\n            this.drawChart();\n          }\n        });\n    }\n  }\n\n  private mergeOptions(): object {\n    return {\n      title: this.title,\n      width: this.width,\n      height: this.height,\n      ...this.options\n    };\n  }\n\n  private applyFormatters(dataTable: google.visualization.DataTable): void {\n    if (this.formatters == null) {\n      return;\n    }\n\n    for (const val of this.formatters) {\n      val.formatter.format(dataTable, val.colIndex);\n    }\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => {\n      // This could also be done by checking if we already subscribed to the events\n      google.visualization.events.removeAllListeners(this.chart);\n      registerChartEvent(this.chart, 'onmouseover', (event: ChartMouseOverEvent) => this.mouseover.emit(event));\n      registerChartEvent(this.chart, 'onmouseout', (event: ChartMouseLeaveEvent) => this.mouseleave.emit(event));\n      registerChartEvent(this.chart, 'select', () => {\n        const selection = this.chart.getSelection();\n        this.select.emit({ selection });\n      });\n\n      this.ready.emit({ chart: this.chart });\n    });\n\n    registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n  }\n\n  private drawChart() {\n    if (this.dashboard != null) {\n      // If this chart is part of a dashboard, the dashboard takes care of drawing\n      return;\n    }\n\n    this.wrapper.draw();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\nimport { ChartErrorEvent, ChartReadyEvent, ChartSelectionChangedEvent } from '../../models/events.model';\nimport { ScriptLoaderService } from '../../script-loader/script-loader.service';\nimport { ChartBase } from '../chart-base/chart-base.component';\n\n@Component({\n  selector: 'chart-wrapper',\n  template: '',\n  styles: [':host { width: fit-content; display: block; }'],\n  host: { class: 'chart-wrapper' },\n  exportAs: 'chartWrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartWrapperComponent implements ChartBase, OnChanges, OnInit {\n  /**\n   * Either a JSON object defining the chart, or a serialized string version of that object.\n   * The format of this object is shown in the\n   * {@link https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart `drawChart()`} documentation.\n   *\n   * The `container` and `containerId` will be overwritten by this component to allow\n   * rendering the chart into the components' template.\n   */\n  @Input()\n  public specs: google.visualization.ChartSpecs;\n\n  @Output()\n  public error = new EventEmitter<ChartErrorEvent>();\n\n  @Output()\n  public ready = new EventEmitter<ChartReadyEvent>();\n\n  @Output()\n  public select = new EventEmitter<ChartSelectionChangedEvent>();\n\n  private wrapper: google.visualization.ChartWrapper;\n  private wrapperReadySubject = new ReplaySubject<google.visualization.ChartWrapper>(1);\n  private initialized = false;\n\n  constructor(private element: ElementRef, private scriptLoaderService: ScriptLoaderService) {}\n\n  public get chart(): google.visualization.ChartBase | null {\n    if (!this.wrapper) {\n      return null;\n    }\n\n    return this.wrapper.getChart();\n  }\n\n  public get wrapperReady$() {\n    return this.wrapperReadySubject.asObservable();\n  }\n\n  public get chartWrapper(): google.visualization.ChartWrapper | null {\n    return this.wrapper;\n  }\n\n  public set chartWrapper(wrapper: google.visualization.ChartWrapper) {\n    this.wrapper = wrapper;\n    this.drawChart();\n  }\n\n  public ngOnInit() {\n    // We don't need to load any chart packages, the chart wrapper will handle this else for us\n    this.scriptLoaderService.loadChartPackages().subscribe(() => {\n      if (!this.specs) {\n        this.specs = {} as google.visualization.ChartSpecs;\n      }\n\n      const { containerId, container, ...specs } = this.specs;\n\n      // Only ever create the wrapper once to allow animations to happen if something changes.\n      this.wrapper = new google.visualization.ChartWrapper({\n        ...specs,\n        container: this.element.nativeElement\n      });\n      this.registerChartEvents();\n\n      this.wrapperReadySubject.next(this.wrapper);\n\n      this.drawChart();\n      this.initialized = true;\n    });\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (!this.initialized) {\n      return;\n    }\n\n    if (changes.specs) {\n      this.updateChart();\n      this.drawChart();\n    }\n  }\n\n  private updateChart() {\n    if (!this.specs) {\n      // When creating the wrapper with empty specs, the google charts library will show an error\n      // If we don't do this, a javascript error will be thrown, which is not as visible to the user\n      this.specs = {} as google.visualization.ChartSpecs;\n    }\n\n    this.wrapper.setChartType(this.specs.chartType);\n    this.wrapper.setDataTable(this.specs.dataTable as any); // The typing here are not correct, this also accepts plain arrays\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setDataSourceUrl(this.specs.dataSourceUrl);\n    this.wrapper.setQuery(this.specs.query);\n    this.wrapper.setOptions(this.specs.options);\n    this.wrapper.setRefreshInterval(this.specs.refreshInterval);\n    this.wrapper.setView(this.specs.view);\n  }\n\n  private drawChart() {\n    this.wrapper.draw();\n  }\n\n  private registerChartEvents() {\n    google.visualization.events.removeAllListeners(this.wrapper);\n\n    const registerChartEvent = (object: any, eventName: string, callback: Function) => {\n      google.visualization.events.addListener(object, eventName, callback);\n    };\n\n    registerChartEvent(this.wrapper, 'ready', () => this.ready.emit({ chart: this.chart }));\n    registerChartEvent(this.wrapper, 'error', (error: ChartErrorEvent) => this.error.emit(error));\n    registerChartEvent(this.wrapper, 'select', () => {\n      const selection = this.chart.getSelection();\n      this.select.emit({ selection });\n    });\n  }\n}\n","import { ChartType } from '../models/chart-type.model';\n\nconst ChartTypesToPackages = {\n  [ChartType.AnnotationChart]: 'annotationchart',\n  [ChartType.AreaChart]: 'corechart',\n  [ChartType.Bar]: 'bar',\n  [ChartType.BarChart]: 'corechart',\n  [ChartType.BubbleChart]: 'corechart',\n  [ChartType.Calendar]: 'calendar',\n  [ChartType.CandlestickChart]: 'corechart',\n  [ChartType.ColumnChart]: 'corechart',\n  [ChartType.ComboChart]: 'corechart',\n  [ChartType.PieChart]: 'corechart',\n  [ChartType.Gantt]: 'gantt',\n  [ChartType.Gauge]: 'gauge',\n  [ChartType.GeoChart]: 'geochart',\n  [ChartType.Histogram]: 'corechart',\n  [ChartType.Line]: 'line',\n  [ChartType.LineChart]: 'corechart',\n  [ChartType.Map]: 'map',\n  [ChartType.OrgChart]: 'orgchart',\n  [ChartType.Sankey]: 'sankey',\n  [ChartType.Scatter]: 'scatter',\n  [ChartType.ScatterChart]: 'corechart',\n  [ChartType.SteppedAreaChart]: 'corechart',\n  [ChartType.Table]: 'table',\n  [ChartType.Timeline]: 'timeline',\n  [ChartType.TreeMap]: 'treemap',\n  [ChartType.WordTree]: 'wordtree'\n};\n\nexport function getPackageForChart(type: ChartType): string {\n  return ChartTypesToPackages[type];\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ChartEditorComponent } from './components/chart-editor/chart-editor.component';\nimport { ChartWrapperComponent } from './components/chart-wrapper/chart-wrapper.component';\nimport { ControlWrapperComponent } from './components/control-wrapper/control-wrapper.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { GoogleChartComponent } from './components/google-chart/google-chart.component';\nimport { GoogleChartsConfig } from './models/google-charts-config.model';\nimport { GOOGLE_CHARTS_CONFIG } from './models/injection-tokens.model';\n\n@NgModule({\n  declarations: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent],\n  exports: [GoogleChartComponent, ChartWrapperComponent, DashboardComponent, ControlWrapperComponent, ChartEditorComponent]\n})\nexport class GoogleChartsModule {\n  public static forRoot(config: GoogleChartsConfig = {}): ModuleWithProviders<GoogleChartsModule> {\n    return {\n      ngModule: GoogleChartsModule,\n      providers: [{ provide: GOOGLE_CHARTS_CONFIG, useValue: config }]\n    };\n  }\n}\n","/*\n * Public API Surface of angular-google-charts\n */\n\n/// <reference path=\"./types/google.visualization/index.d.ts\" />\n\nexport * from './lib/components/chart-editor/chart-editor-ref';\nexport * from './lib/components/chart-editor/chart-editor.component';\nexport * from './lib/components/google-chart/google-chart.component';\nexport * from './lib/components/chart-wrapper/chart-wrapper.component';\nexport * from './lib/components/dashboard/dashboard.component';\nexport * from './lib/components/control-wrapper/control-wrapper.component';\nexport * from './lib/helpers/chart.helper';\nexport * from './lib/models/events.model';\nexport * from './lib/models/chart-type.model';\nexport * from './lib/models/control-type.model';\nexport * from './lib/components/chart-base/chart-base.component';\nexport * from './lib/script-loader/script-loader.service';\nexport * from './lib/google-charts.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {GoogleChartsConfig as ɵb} from './lib/models/google-charts-config.model';\nexport {GOOGLE_CHARTS_CONFIG as ɵa} from './lib/models/injection-tokens.model';"],"names":[],"mappings":";;;;;;IAOE,wBAA6B,MAAwC;QAAxC,WAAM,GAAN,MAAM,CAAkC;QAFpD,gBAAW,GAAG,IAAI,OAAO,EAAmB,CAAC;QAG5D,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;;;;;IAMM,oCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;KACxC;;;;IAKM,+BAAM,GAAb;QACE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;KAC3B;IAEO,0CAAiB,GAAzB;QAAA,iBAgBC;QAfC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE;YAChE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAE5D,IAAM,mBAAmB,GAAG,KAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;YAE1D,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC3C,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC7B,CAAC,CAAC;QAEH,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE;YACpE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAE5D,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC7B,CAAC,CAAC;KACJ;IACH,qBAAC;AAAD,CAAC;;ICvCY,oBAAoB,GAAG,IAAI,cAAc,CAAqB,sBAAsB;;ACGjG,IAAM,cAAc,GAAuB;IACzC,UAAU,EAAE,EAAE;IACd,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,KAAK;CAChB,CAAC;;IAOA,6BACU,IAAY,EACO,QAAgB,EACO,MAA2B;QAFrE,SAAI,GAAJ,IAAI,CAAQ;QACO,aAAQ,GAAR,QAAQ,CAAQ;QACO,WAAM,GAAN,MAAM,CAAqB;QAN9D,iBAAY,GAAG,0CAA0C,CAAC;QAC1D,sBAAiB,GAAG,IAAI,OAAO,EAAQ,CAAC;QAOvD,IAAI,CAAC,MAAM,yBAAQ,cAAc,IAAM,MAAM,IAAI,EAAE,EAAG,CAAC;KACxD;;;;;;;;IASM,qDAAuB,GAA9B;QACE,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,MAAM,KAAK,WAAW,EAAE;YACzE,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;KACb;;;;;;;;;;;IAYM,+CAAiB,GAAxB;QAAA,iBAqBC;QArBwB,kBAAqB;aAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;YAArB,6BAAqB;;QAC5C,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC,IAAI,CACjC,SAAS,CAAC;YACR,OAAO,IAAI,UAAU,CAAO,UAAA,QAAQ;gBAClC,IAAM,MAAM,GAAG;oBACb,QAAQ,UAAA;oBACR,QAAQ,EAAE,KAAI,CAAC,QAAQ;oBACvB,UAAU,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU;oBAClC,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,QAAQ;iBAC/B,CAAC;gBAEF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAChD,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC;oBAC9B,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBACZ,QAAQ,CAAC,IAAI,EAAE,CAAC;wBAChB,QAAQ,CAAC,QAAQ,EAAE,CAAC;qBACrB,CAAC,CAAC;iBACJ,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ,CAAC,CACH,CAAC;KACH;;;;;;;IAQO,8CAAgB,GAAxB;QAAA,iBAqBC;QApBC,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAClC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACjB;aAAM,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE;YACxC,IAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC/C,MAAM,CAAC,MAAM,GAAG;gBACd,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;oBACZ,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;oBAC9B,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;iBACnC,CAAC,CAAC;aACJ,CAAC;YAEF,MAAM,CAAC,OAAO,GAAG;gBACf,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;oBACZ,OAAO,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;oBAC1D,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC,CAAC;iBACrF,CAAC,CAAC;aACJ,CAAC;SACH;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;KAC9C;IAEO,mDAAqB,GAA7B;QACE,OAAO,IAAI,CAAC,qBAAqB,EAAE,IAAI,IAAI,CAAC;KAC7C;IAEO,mDAAqB,GAA7B;QAAA,iBAGC;QAFC,IAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxE,OAAO,WAAW,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,KAAK,KAAI,CAAC,YAAY,GAAA,CAAC,CAAC;KACrE;IAEO,sDAAwB,GAAhC;QACE,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;QAChC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC;QAC/B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC7D,OAAO,MAAM,CAAC;KACf;;gBApGe,MAAM;6CACnB,MAAM,SAAC,SAAS;gDAChB,MAAM,SAAC,oBAAoB,cAAG,QAAQ;;;IAP9B,mBAAmB;QAD/B,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;QAO9B,WAAA,MAAM,CAAC,SAAS,CAAC,CAAA;QACjB,WAAA,MAAM,CAAC,oBAAoB,CAAC,CAAA,EAAE,WAAA,QAAQ,EAAE,CAAA;yCAF3B,MAAM;OALX,mBAAmB,CA0G/B;8BAxHD;CAcA;;;ICIE,8BAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAFpD,uBAAkB,GAAG,IAAI,OAAO,EAAoC,CAAC;KAEb;IAKhE,sBAAW,8CAAY;;;;aAAvB;YACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;SAC/C;;;OAAA;IAEM,uCAAQ,GAAf;QAAA,iBAMC;QALC,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC;YAClE,KAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;YACrD,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;SACpC,CAAC,CAAC;KACJ;IAWM,wCAAS,GAAhB,UAAiB,SAAoB,EAAE,OAAiD;QACtF,IAAM,MAAM,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;QAE9D,MAAM,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAA,MAAM;YACnC,IAAI,MAAM,EAAE;gBACV,SAAS,CAAC,YAAY,GAAG,MAAM,CAAC;aACjC;SACF,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;KACf;;gBArCwC,mBAAmB;;IAJjD,oBAAoB;QANhC,SAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,2BAA2B;YACrC,IAAI,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE;YAC/B,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;yCAKyC,mBAAmB;OAJjD,oBAAoB,CA0ChC;IAAD,2BAAC;CA1CD;;ICdY;AAAZ,WAAY,SAAS;IACnB,gDAAmC,CAAA;IACnC,oCAAuB,CAAA;IACvB,wBAAW,CAAA;IACX,kCAAqB,CAAA;IACrB,wCAA2B,CAAA;IAC3B,kCAAqB,CAAA;IACrB,kDAAqC,CAAA;IACrC,wCAA2B,CAAA;IAC3B,sCAAyB,CAAA;IACzB,kCAAqB,CAAA;IACrB,4BAAe,CAAA;IACf,4BAAe,CAAA;IACf,kCAAqB,CAAA;IACrB,oCAAuB,CAAA;IACvB,0BAAa,CAAA;IACb,oCAAuB,CAAA;IACvB,wBAAW,CAAA;IACX,kCAAqB,CAAA;IACrB,8BAAiB,CAAA;IACjB,gCAAmB,CAAA;IACnB,0CAA6B,CAAA;IAC7B,kDAAqC,CAAA;IACrC,4BAAe,CAAA;IACf,kCAAqB,CAAA;IACrB,gCAAmB,CAAA;IACnB,kCAAqB,CAAA;AACvB,CAAC,EA3BW,SAAS,KAAT,SAAS;;ACArB;;;SAGgB,gBAAgB;;;;IAI9B,OAAO,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvD;;ICRY;AAAZ,WAAY,UAAU;IACpB,yCAA2B,CAAA;IAC3B,6CAA+B,CAAA;IAC/B,2CAA6B,CAAA;IAC7B,+CAAiC,CAAA;IACjC,qCAAuB,CAAA;AACzB,CAAC,EANW,UAAU,KAAV,UAAU;;;IC8GpB,iCAAoB,aAAkC;QAAlC,kBAAa,GAAb,aAAa,CAAqB;;;;QA9B/C,UAAK,GAAG,IAAI,YAAY,EAAmB,CAAC;;;;;;;QAS5C,UAAK,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;;;;QASjC,gBAAW,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;QAM9B,OAAE,GAAG,gBAAgB,EAAE,CAAC;QAGhC,wBAAmB,GAAG,IAAI,aAAa,CAAsC,CAAC,CAAC,CAAC;QAChF,gBAAW,GAAG,KAAK,CAAC;KAE8B;IAK1D,sBAAW,kDAAa;;;;aAAxB;YACE,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;SAChD;;;OAAA;IAED,sBAAW,mDAAc;aAAzB;YACE,OAAO,IAAI,CAAC,eAAe,CAAC;SAC7B;;;OAAA;IAEM,0CAAQ,GAAf;QAAA,iBAKC;QAJC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC;YACzD,KAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB,CAAC,CAAC;KACJ;IAEM,6CAAW,GAAlB,UAAmB,OAAsB;QACvC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QAED,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChD;QAED,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/C;QAED,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3C;KACF;IAEO,sDAAoB,GAA5B;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC;YAC7D,WAAW,EAAE,IAAI,CAAC,EAAE;YACpB,WAAW,EAAE,IAAI,CAAC,IAAI;YACtB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KACrD;IAEO,mDAAiB,GAAzB;QAAA,iBAMC;QALC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAErE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;QACxG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;QACxG,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;KACrH;;gBAxDkC,mBAAmB;;IA/EtD;QADC,KAAK,EAAE;;wDAC6B;IAarC;QADC,KAAK,EAAE;;yDACiB;IAazB;QADC,KAAK,EAAE;;4DACgB;IAiBxB;QADC,KAAK,EAAE;;0DACc;IAMtB;QADC,MAAM,EAAE;;0DAC0C;IASnD;QADC,MAAM,EAAE;;0DAC+B;IASxC;QADC,MAAM,EAAE;;gEACqC;IAM9C;QADC,WAAW,CAAC,IAAI,CAAC;;uDACsB;IA9E7B,uBAAuB;QAPnC,SAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE,EAAE,KAAK,EAAE,iBAAiB,EAAE;YAClC,QAAQ,EAAE,gBAAgB;YAC1B,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;yCAqFmC,mBAAmB;OApF3C,uBAAuB,CA6InC;IAAD,8BAAC;CA7ID;;;IC2CE,4BAAoB,OAAmB,EAAU,aAAkC;QAA/D,YAAO,GAAP,OAAO,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAqB;;;;;;;;QAhB5E,UAAK,GAAG,IAAI,YAAY,EAAQ,CAAC;;;;;QAOjC,UAAK,GAAG,IAAI,YAAY,EAAmB,CAAC;QAO3C,gBAAW,GAAG,KAAK,CAAC;KAE2D;IAEhF,qCAAQ,GAAf;QAAA,iBAMC;QALC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC;YACzD,KAAI,CAAC,eAAe,EAAE,CAAC;YACvB,KAAI,CAAC,eAAe,EAAE,CAAC;YACvB,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB,CAAC,CAAC;KACJ;IAEM,wCAAW,GAAlB,UAAmB,OAAsB;QACvC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QAED,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,EAAE;YACnC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACrC;KACF;IAEO,4CAAe,GAAvB;QAAA,iBAwBC;;;;;QAnBC,IAAM,qBAAqB,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,aAAa,GAAA,CAAC,CAAC;QACzF,IAAM,YAAY,GAAG,IAAI,CAAC,eAAe;aACtC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,GAAG,GAAA,CAAC;aAC3B,GAAG,CAAC,UAAA,MAAM;YACT,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;;gBAEzB,OAAO,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,aAAa,GAAA,CAAC,CAAC,CAAC;aAChE;iBAAM;gBACL,OAAO,MAAM,CAAC,aAAa,CAAC;aAC7B;SACF,CAAC,CAAC;;;QAIL,aAAa,UAAK,qBAAqB,EAAK,YAAY,EAAE,CAAC,SAAS,CAAC;YACnE,KAAI,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAChF,KAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;SACrC,CAAC,CAAC;KACJ;IAEO,+CAAkB,GAA1B;QAAA,iBASC;QARC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,OAAO;YAClC,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBAC9B,IAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,YAAY,GAAA,CAAC,CAAC;gBACnE,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;aAC5D;iBAAM;gBACL,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;aACvE;SACF,CAAC,CAAC;KACJ;IAEO,4CAAe,GAAvB;QACE,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YACrB,OAAO;SACR;QAED,IAAI,cAAc,GAAG,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;YACxB,cAAc,GAAG,KAAK,CAAC;SACxB;QAED,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,cAAc,CAAC,CAAC;KAC/F;IAEO,2CAAc,GAAtB;QACE,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,iBAAQ,IAAI,CAAC,OAAO,GAAK,IAAI,CAAC,IAAI,EAAE;SACrC;aAAM;YACL,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;KACF;;gBA7E4B,UAAU;gBAAyB,mBAAmB;;IAnCnF;QADC,KAAK,EAAE;;oDACY;IASpB;QADC,KAAK,EAAE;;uDACiB;IAUzB;QADC,MAAM,EAAE;;qDAC+B;IAOxC;QADC,MAAM,EAAE;;qDAC0C;IAGnD;QADC,eAAe,CAAC,uBAAuB,CAAC;kCAChB,SAAS;+DAA0B;IApCjD,kBAAkB;QAP9B,SAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,QAAQ,EAAE,2BAA2B;YACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;YAC/C,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE;SAC7B,CAAC;yCA2C6B,UAAU,EAAyB,mBAAmB;OA1CxE,kBAAkB,CAwH9B;IAAD,yBAAC;CAxHD;;;IC6GE,8BACU,OAAmB,EACnB,mBAAwC,EAC5B,SAA8B;QAF1C,YAAO,GAAP,OAAO,CAAY;QACnB,wBAAmB,GAAnB,mBAAmB,CAAqB;QAC5B,cAAS,GAAT,SAAS,CAAqB;;;;;QA9C7C,YAAO,GAAW,EAAE,CAAC;;;;;;;;QAmBrB,kBAAa,GAAG,KAAK,CAAC;QAGtB,UAAK,GAAG,IAAI,YAAY,EAAmB,CAAC;QAG5C,UAAK,GAAG,IAAI,YAAY,EAAmB,CAAC;QAG5C,WAAM,GAAG,IAAI,YAAY,EAA8B,CAAC;QAGxD,cAAS,GAAG,IAAI,YAAY,EAAuB,CAAC;QAGpD,eAAU,GAAG,IAAI,YAAY,EAAwB,CAAC;QAMrD,wBAAmB,GAAG,IAAI,aAAa,CAAoC,CAAC,CAAC,CAAC;QAC9E,gBAAW,GAAG,KAAK,CAAC;KAMxB;IAEJ,sBAAW,uCAAK;aAAhB;YACE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACjB,OAAO,IAAI,CAAC;aACb;YAED,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;SAChC;;;OAAA;IAED,sBAAW,+CAAa;aAAxB;YACE,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;SAChD;;;OAAA;IAED,sBAAW,8CAAY;aAAvB;YACE,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;aAED,UAAwB,OAA0C;YAChE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;;;OALA;IAOM,uCAAQ,GAAf;QAAA,iBAoBC;;QAlBC,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC;YACrD,KAAI,CAAC,eAAe,EAAE,CAAC;;YAGvB,KAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC;gBACnD,SAAS,EAAE,KAAI,CAAC,OAAO,CAAC,aAAa;gBACrC,SAAS,EAAE,KAAI,CAAC,IAAI;gBACpB,SAAS,EAAE,KAAI,CAAC,SAAS;gBACzB,OAAO,EAAE,KAAI,CAAC,YAAY,EAAE;aAC7B,CAAC,CAAC;YAEH,KAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;YAC5C,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,KAAI,CAAC,SAAS,EAAE,CAAC;SAClB,CAAC,CAAC;KACJ;IAEM,0CAAW,GAAlB,UAAmB,OAAsB;QACvC,IAAI,OAAO,CAAC,aAAa,EAAE;YACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,YAAY,GAAG,KAAK,CAAC;YACzB,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,UAAU,EAAE;gBACzD,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,YAAY,GAAG,IAAI,CAAC;aACrB;YAED,IAAI,OAAO,CAAC,IAAI,EAAE;gBAChB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrC,YAAY,GAAG,IAAI,CAAC;aACrB;YAED,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE;gBACvE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;gBAC7C,YAAY,GAAG,IAAI,CAAC;aACrB;YAED,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,SAAS,EAAE,CAAC;aAClB;SACF;KACF;IAEO,8CAAe,GAAvB;QACE,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YACrB,OAAO;SACR;QAED,IAAI,cAAc,GAAG,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;YACxB,cAAc,GAAG,KAAK,CAAC;SACxB;QAED,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,cAAc,CAAC,CAAC;QAC9F,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACtC;IAEO,6CAAc,GAAtB;QACE,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,iBAAQ,IAAI,CAAC,OAAO,GAAK,IAAI,CAAC,IAAI,EAAE;SACrC;aAAM;YACL,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;KACF;IAEO,mDAAoB,GAA5B;QAAA,iBAeC;QAdC,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;YACnC,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;YACtC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAChC;QAED,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC;iBAClD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;iBACvB,SAAS,CAAC;gBACT,IAAI,KAAI,CAAC,WAAW,EAAE;oBACpB,KAAI,CAAC,SAAS,EAAE,CAAC;iBAClB;aACF,CAAC,CAAC;SACN;KACF;IAEO,2CAAY,GAApB;QACE,kBACE,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,IAAI,CAAC,MAAM,IAChB,IAAI,CAAC,OAAO,EACf;KACH;IAEO,8CAAe,GAAvB,UAAwB,SAAyC;;QAC/D,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;YAC3B,OAAO;SACR;;YAED,KAAkB,IAAA,KAAA,SAAA,IAAI,CAAC,UAAU,CAAA,gBAAA,4BAAE;gBAA9B,IAAM,GAAG,WAAA;gBACZ,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;aAC/C;;;;;;;;;KACF;IAEO,kDAAmB,GAA3B;QAAA,iBAqBC;QApBC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE7D,IAAM,kBAAkB,GAAG,UAAC,MAAW,EAAE,SAAiB,EAAE,QAAkB;YAC5E,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;SACtE,CAAC;QAEF,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE;;YAExC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;YAC3D,kBAAkB,CAAC,KAAI,CAAC,KAAK,EAAE,aAAa,EAAE,UAAC,KAA0B,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;YAC1G,kBAAkB,CAAC,KAAI,CAAC,KAAK,EAAE,YAAY,EAAE,UAAC,KAA2B,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;YAC3G,kBAAkB,CAAC,KAAI,CAAC,KAAK,EAAE,QAAQ,EAAE;gBACvC,IAAM,SAAS,GAAG,KAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;gBAC5C,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;aACjC,CAAC,CAAC;YAEH,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SACxC,CAAC,CAAC;QAEH,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,UAAC,KAAsB,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;KAC/F;IAEO,wCAAS,GAAjB;QACE,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,EAAE;;YAE1B,OAAO;SACR;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;KACrB;;gBArKkB,UAAU;gBACE,mBAAmB;gBAChB,kBAAkB,uBAAjD,QAAQ;;IA9FX;QADC,KAAK,EAAE;;sDACgB;IAQxB;QADC,KAAK,EAAE;;sDACY;IASpB;QADC,KAAK,EAAE;;yDACiB;IAQzB;QADC,KAAK,EAAE;;uDACc;IAQtB;QADC,KAAK,EAAE;;uDACc;IAQtB;QADC,KAAK,EAAE;;wDACe;IAOvB;QADC,KAAK,EAAE;;yDACoB;IAS5B;QADC,KAAK,EAAE;;4DACwB;IAUhC;QADC,KAAK,EAAE;;+DACqB;IAG7B;QADC,MAAM,EAAE;;uDAC0C;IAGnD;QADC,MAAM,EAAE;;uDAC0C;IAGnD;QADC,MAAM,EAAE;;wDACsD;IAG/D;QADC,MAAM,EAAE;;2DACkD;IAG3D;QADC,MAAM,EAAE;;4DACoD;IAvFlD,oBAAoB;QARhC,SAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,QAAQ,EAAE,EAAE;YAEZ,IAAI,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE;YAC/B,QAAQ,EAAE,aAAa;YACvB,eAAe,EAAE,uBAAuB,CAAC,MAAM;qBAHtC,+CAA+C;SAIzD,CAAC;QAoGG,WAAA,QAAQ,EAAE,CAAA;yCAFM,UAAU;YACE,mBAAmB;YAChB,kBAAkB;OAnGzC,oBAAoB,CAuQhC;IAAD,2BAAC;CAvQD;;;ICUE,+BAAoB,OAAmB,EAAU,mBAAwC;QAArE,YAAO,GAAP,OAAO,CAAY;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;QAZlF,UAAK,GAAG,IAAI,YAAY,EAAmB,CAAC;QAG5C,UAAK,GAAG,IAAI,YAAY,EAAmB,CAAC;QAG5C,WAAM,GAAG,IAAI,YAAY,EAA8B,CAAC;QAGvD,wBAAmB,GAAG,IAAI,aAAa,CAAoC,CAAC,CAAC,CAAC;QAC9E,gBAAW,GAAG,KAAK,CAAC;KAEiE;IAE7F,sBAAW,wCAAK;aAAhB;YACE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACjB,OAAO,IAAI,CAAC;aACb;YAED,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;SAChC;;;OAAA;IAED,sBAAW,gDAAa;aAAxB;YACE,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;SAChD;;;OAAA;IAED,sBAAW,+CAAY;aAAvB;YACE,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;aAED,UAAwB,OAA0C;YAChE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;;;OALA;IAOM,wCAAQ,GAAf;QAAA,iBAqBC;;QAnBC,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC;YACrD,IAAI,CAAC,KAAI,CAAC,KAAK,EAAE;gBACf,KAAI,CAAC,KAAK,GAAG,EAAqC,CAAC;aACpD;YAED,IAAM,gBAAiD,EAA/C,4BAAW,EAAE,wBAAS,EAAE,gDAAuB,CAAC;;YAGxD,KAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,aAAa,CAAC,YAAY,uBAC/C,KAAK,KACR,SAAS,EAAE,KAAI,CAAC,OAAO,CAAC,aAAa,IACrC,CAAC;YACH,KAAI,CAAC,mBAAmB,EAAE,CAAC;YAE3B,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;YAE5C,KAAI,CAAC,SAAS,EAAE,CAAC;YACjB,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB,CAAC,CAAC;KACJ;IAEM,2CAAW,GAAlB,UAAmB,OAAsB;QACvC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,OAAO;SACR;QAED,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;KACF;IAEO,2CAAW,GAAnB;QACE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;;;YAGf,IAAI,CAAC,KAAK,GAAG,EAAqC,CAAC;SACpD;QAED,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAgB,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACvC;IAEO,yCAAS,GAAjB;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;KACrB;IAEO,mDAAmB,GAA3B;QAAA,iBAaC;QAZC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE7D,IAAM,kBAAkB,GAAG,UAAC,MAAW,EAAE,SAAiB,EAAE,QAAkB;YAC5E,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;SACtE,CAAC;QAEF,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAI,CAAC,KAAK,EAAE,CAAC,GAAA,CAAC,CAAC;QACxF,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,UAAC,KAAsB,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;QAC9F,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE;YACzC,IAAM,SAAS,GAAG,KAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;YAC5C,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;SACjC,CAAC,CAAC;KACJ;;gBA3F4B,UAAU;gBAA+B,mBAAmB;;IAfzF;QADC,KAAK,EAAE;;wDACsC;IAG9C;QADC,MAAM,EAAE;;wDAC0C;IAGnD;QADC,MAAM,EAAE;;wDAC0C;IAGnD;QADC,MAAM,EAAE;;yDACsD;IAnBpD,qBAAqB;QARjC,SAAS,CAAC;YACT,QAAQ,EAAE,eAAe;YACzB,QAAQ,EAAE,EAAE;YAEZ,IAAI,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE;YAChC,QAAQ,EAAE,cAAc;YACxB,eAAe,EAAE,uBAAuB,CAAC,MAAM;qBAHtC,+CAA+C;SAIzD,CAAC;yCA0B6B,UAAU,EAA+B,mBAAmB;OAzB9E,qBAAqB,CAqHjC;IAAD,4BAAC;CArHD;;;ACvBA,IAAM,oBAAoB;IACxB,GAAC,SAAS,CAAC,eAAe,IAAG,iBAAiB;IAC9C,GAAC,SAAS,CAAC,SAAS,IAAG,WAAW;IAClC,GAAC,SAAS,CAAC,GAAG,IAAG,KAAK;IACtB,GAAC,SAAS,CAAC,QAAQ,IAAG,WAAW;IACjC,GAAC,SAAS,CAAC,WAAW,IAAG,WAAW;IACpC,GAAC,SAAS,CAAC,QAAQ,IAAG,UAAU;IAChC,GAAC,SAAS,CAAC,gBAAgB,IAAG,WAAW;IACzC,GAAC,SAAS,CAAC,WAAW,IAAG,WAAW;IACpC,GAAC,SAAS,CAAC,UAAU,IAAG,WAAW;IACnC,GAAC,SAAS,CAAC,QAAQ,IAAG,WAAW;IACjC,GAAC,SAAS,CAAC,KAAK,IAAG,OAAO;IAC1B,GAAC,SAAS,CAAC,KAAK,IAAG,OAAO;IAC1B,GAAC,SAAS,CAAC,QAAQ,IAAG,UAAU;IAChC,GAAC,SAAS,CAAC,SAAS,IAAG,WAAW;IAClC,GAAC,SAAS,CAAC,IAAI,IAAG,MAAM;IACxB,GAAC,SAAS,CAAC,SAAS,IAAG,WAAW;IAClC,GAAC,SAAS,CAAC,GAAG,IAAG,KAAK;IACtB,GAAC,SAAS,CAAC,QAAQ,IAAG,UAAU;IAChC,GAAC,SAAS,CAAC,MAAM,IAAG,QAAQ;IAC5B,GAAC,SAAS,CAAC,OAAO,IAAG,SAAS;IAC9B,GAAC,SAAS,CAAC,YAAY,IAAG,WAAW;IACrC,GAAC,SAAS,CAAC,gBAAgB,IAAG,WAAW;IACzC,GAAC,SAAS,CAAC,KAAK,IAAG,OAAO;IAC1B,GAAC,SAAS,CAAC,QAAQ,IAAG,UAAU;IAChC,GAAC,SAAS,CAAC,OAAO,IAAG,SAAS;IAC9B,GAAC,SAAS,CAAC,QAAQ,IAAG,UAAU;OACjC,CAAC;SAEc,kBAAkB,CAAC,IAAe;IAChD,OAAO,oBAAoB,CAAC,IAAI,CAAC,CAAC;AACpC;;;ICnBA;KAOC;2BAPY,kBAAkB;IACf,0BAAO,GAArB,UAAsB,MAA+B;QAA/B,uBAAA,EAAA,WAA+B;QACnD,OAAO;YACL,QAAQ,EAAE,oBAAkB;YAC5B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;SACjE,CAAC;KACH;;IANU,kBAAkB;QAJ9B,QAAQ,CAAC;YACR,YAAY,EAAE,CAAC,oBAAoB,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,uBAAuB,EAAE,oBAAoB,CAAC;YAC9H,OAAO,EAAE,CAAC,oBAAoB,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,uBAAuB,EAAE,oBAAoB,CAAC;SAC1H,CAAC;OACW,kBAAkB,CAO9B;IAAD,yBAAC;CAPD;;ACdA;;;;ACAA;;;;;;"}